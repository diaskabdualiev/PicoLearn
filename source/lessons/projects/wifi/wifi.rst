==============================================================================
Подключение к интернету с использованием Wi-Fi на Raspberry Pi Pico W
==============================================================================

Введение
===========

В этом уроке мы научимся настраивать Wi-Fi соединение на Raspberry Pi Pico W и проверять подключение к интернету. Raspberry Pi Pico W, в отличие от обычной версии Pico, оснащен встроенным модулем беспроводной связи, который позволяет подключаться к Wi-Fi сетям. Это открывает возможности для создания устройств, требующих доступа к интернету: сетевых датчиков, устройств умного дома, веб-серверов и многого другого.

Необходимые компоненты
=======================

* Raspberry Pi Pico W (версия с Wi-Fi модулем)
* Микро-USB кабель для питания и программирования
* Компьютер с установленной средой разработки (например, Thonny IDE)
* Доступная Wi-Fi сеть с подключением к интернету

Структура проекта
=================

Наш проект будет состоять из одного файла:

* **main.py** - основной файл с кодом для подключения к Wi-Fi и проверки соединения

Пошаговые инструкции
====================

Шаг 1: Настройка оборудования
-----------------------------

1. Установите MicroPython для Raspberry Pi Pico W, если это еще не сделано.
2. Подключите Pico W к компьютеру через USB-кабель.
3. Убедитесь, что Pico W определяется системой и виден в Thonny IDE.

Шаг 2: Создание основного файла main.py
---------------------------------------

Создайте файл main.py со следующим содержимым:

.. code-block:: python

   import network
   import time
   import socket
   from machine import Pin
   
   # Настройка пина для встроенного светодиода
   led = Pin("LED", Pin.OUT)
   
   # Параметры Wi-Fi сети
   SSID = "YOUR_WIFI_SSID"        # Замените на имя вашей Wi-Fi сети
   PASSWORD = "YOUR_WIFI_PASSWORD" # Замените на пароль вашей Wi-Fi сети
   
   # Функция для подключения к Wi-Fi
   def connect_to_wifi():
       # Инициализация интерфейса WLAN в режиме станции (клиента)
       wlan = network.WLAN(network.STA_IF)
       wlan.active(True)
       
       # Проверка статуса подключения
       if wlan.isconnected():
           print("Уже подключено к Wi-Fi")
           return wlan
       
       # Начинаем подключение к Wi-Fi сети
       print(f"Подключение к Wi-Fi сети: {SSID}...")
       wlan.connect(SSID, PASSWORD)
       
       # Ожидание подключения с таймаутом
       max_wait = 20  # максимальное время ожидания в секундах
       timeout = False
       
       while max_wait > 0:
           if wlan.isconnected():
               break
           max_wait -= 1
           print("Ожидание подключения...")
           time.sleep(1)
           led.toggle()  # Мигаем светодиодом во время подключения
       
       # Проверка успешности подключения
       if wlan.isconnected():
           led.on()  # Включаем светодиод при успешном подключении
           ip_address = wlan.ifconfig()[0]
           print(f"Подключено к Wi-Fi! IP-адрес: {ip_address}")
           return wlan
       else:
           led.off()  # Выключаем светодиод при неудачном подключении
           print("Не удалось подключиться к Wi-Fi. Проверьте параметры сети.")
           return None

Разберем основные части кода:

1. Импортируем необходимые модули:
   * ``network`` - для работы с сетевыми интерфейсами
   * ``time`` - для создания задержек
   * ``socket`` - для сетевых соединений
   * ``Pin`` - для управления светодиодом

2. Настраиваем встроенный светодиод для индикации статуса подключения.

3. Определяем параметры Wi-Fi сети:
   * SSID - имя вашей Wi-Fi сети
   * PASSWORD - пароль для доступа к сети

4. Создаем функцию ``connect_to_wifi()``, которая:
   * Инициализирует Wi-Fi интерфейс в режиме станции (клиента)
   * Проверяет, не подключен ли уже Pico W к сети
   * Начинает процесс подключения к указанной сети
   * Ожидает подключения с ограничением по времени
   * Мигает светодиодом для индикации процесса подключения
   * Выводит информацию о результате подключения и IP-адресе
   * Возвращает объект WLAN при успешном подключении или None при неудаче

Теперь добавим функции для проверки подключения к интернету:

.. code-block:: python

   # Функция для проверки подключения к интернету (пинг)
   def ping_google_dns():
       try:
           # Создаем сокет для подключения к Google DNS (8.8.8.8)
           s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
           s.settimeout(1)
           
           # Пытаемся отправить сообщение на Google DNS
           s.sendto(b'', ('8.8.8.8', 53))
           s.close()
           return True
       except:
           return False
   
   # Функция для проверки DNS-разрешения
   def check_dns_resolution(hostname="google.com"):
       try:
           # Попытка получить IP-адрес по доменному имени
           ip_address = socket.getaddrinfo(hostname, 80)[0][-1][0]
           print(f"DNS-разрешение для {hostname}: {ip_address}")
           return True
       except Exception as e:
           print(f"Ошибка DNS-разрешения: {e}")
           return False
   
   # Функция для проверки HTTP-запроса
   def check_http_request(url="http://www.google.com"):
       try:
           # Разбираем URL
           _, _, host, path = url.split('/', 3)
           if ":" in host:
               host, port = host.split(':')
               port = int(port)
           else:
               port = 80
           
           # Создаем сокет и подключаемся к серверу
           s = socket.socket()
           s.settimeout(5)
           s.connect((host, port))
           
           # Формируем HTTP-запрос
           request = f"GET /{path} HTTP/1.0\r\nHost: {host}\r\n\r\n"
           s.send(request.encode())
           
           # Получаем и выводим ответ
           response = s.recv(512)
           s.close()
           
           print("HTTP-ответ получен:")
           print(response.decode('utf-8').split('\r\n')[0])  # Выводим только статус
           return True
       except Exception as e:
           print(f"Ошибка HTTP-запроса: {e}")
           return False

Разберем эти функции:

1. ``ping_google_dns()``:
   * Создает UDP сокет
   * Пытается отправить пустое сообщение на сервер Google DNS (8.8.8.8)
   * Возвращает True при успехе или False при неудаче
   * Это простой способ проверить базовую связь с интернетом

2. ``check_dns_resolution(hostname)``:
   * Пытается получить IP-адрес для указанного доменного имени
   * Показывает, работает ли DNS-разрешение, что важно для обычной работы в интернете
   * Возвращает True при успехе или False при неудаче

3. ``check_http_request(url)``:
   * Выполняет HTTP GET-запрос к указанному URL
   * Разбирает URL на компоненты (хост, путь, порт)
   * Создает TCP сокет и подключается к серверу
   * Отправляет HTTP-запрос и получает ответ
   * Выводит статус ответа (первая строка)
   * Возвращает True при успехе или False при неудаче

Теперь добавим основную функцию программы:

.. code-block:: python

   # Основной цикл программы
   def main():
       print("Проверка подключения к интернету на Raspberry Pi Pico W")
       print("--------------------------------------------------")
       
       # Подключаемся к Wi-Fi
       wlan = connect_to_wifi()
       
       if wlan is None:
           print("Невозможно продолжить без подключения к Wi-Fi.")
           return
       
       try:
           # Ждем стабилизации соединения
           time.sleep(2)
           
           # Проверяем подключение к интернету
           print("\nПроверка подключения к интернету...")
           
           # Проверка пинга
           print("\n1. Проверка пинга до Google DNS (8.8.8.8):")
           if ping_google_dns():
               print("Пинг успешен! Базовое подключение к интернету работает.")
           else:
               print("Пинг не удался. Возможно, проблемы с подключением.")
           
           # Проверка DNS
           print("\n2. Проверка DNS-разрешения:")
           check_dns_resolution()
           
           # Проверка HTTP
           print("\n3. Проверка HTTP-запроса:")
           check_http_request()
           
           print("\nПроверка подключения завершена.")
           
           # Мигаем светодиодом, чтобы показать завершение всех проверок
           for _ in range(5):
               led.toggle()
               time.sleep(0.2)
           
           # Оставляем светодиод включенным, если подключение работает
           led.on()
           
       except KeyboardInterrupt:
           # Выключаем светодиод при завершении
           led.off()
           print("\nПрограмма завершена пользователем.")
   
   # Запускаем программу
   if __name__ == "__main__":
       main()

Этот блок кода:

1. Создает функцию ``main()``, которая:
   * Запускает подключение к Wi-Fi
   * Если подключение успешно, выполняет три проверки подключения к интернету:

     * Пинг до Google DNS (8.8.8.8)
     * DNS-разрешение доменного имени
     * HTTP-запрос к веб-сайту
     
   * Использует светодиод для индикации статуса

2. Запускает функцию ``main()`` при непосредственном выполнении файла

Инструкции по загрузке и запуску
================================

1. Перед загрузкой кода, замените значения ``SSID`` и ``PASSWORD`` на параметры вашей Wi-Fi сети.
2. Подключите Raspberry Pi Pico W к компьютеру через USB-кабель.
3. Скопируйте файл main.py на Pico W (можно использовать Thonny IDE или любой другой метод).
4. После загрузки файла программа автоматически запустится.
5. Откройте последовательный порт (в Thonny это происходит автоматически) для просмотра вывода.
6. Наблюдайте за процессом подключения и результатами проверок.
7. Встроенный светодиод будет мигать во время подключения и останется включенным при успешном соединении.

Возможные проблемы и их решения
===============================

Не удается подключиться к Wi-Fi
------------------------------------------------------------

Если Pico W не может подключиться к Wi-Fi сети:

* Проверьте правильность указанных SSID и пароля.
* Убедитесь, что Wi-Fi сеть находится в зоне досягаемости.
* Проверьте, поддерживает ли ваша сеть диапазон 2.4 ГГц (Pico W не поддерживает 5 ГГц).
* Попробуйте уменьшить расстояние между Pico W и вашим роутером.

Успешное подключение к Wi-Fi, но интернет не работает
----------------------------------------------------------------------------------

Если Pico W подключается к Wi-Fi, но не может получить доступ к интернету:

* Проверьте, работает ли интернет на других устройствах в вашей сети.
* Убедитесь, что ваш роутер правильно настроен и имеет доступ к интернету.
* Проверьте, не блокируются ли исходящие соединения вашим роутером или провайдером.
* Попробуйте перезагрузить ваш Wi-Fi роутер.

Ошибки DNS-разрешения
--------------------------------------------------

Если пинг работает, но DNS-разрешение не удается:

* Попробуйте использовать другой DNS-сервер:

.. code-block:: python

   # Можно добавить в функцию connect_to_wifi() после успешного подключения
   # Установка Google DNS серверов
   wlan.ifconfig((wlan.ifconfig()[0], wlan.ifconfig()[1], '8.8.8.8', '8.8.4.4'))

* Проверьте, не блокирует ли ваш провайдер определенные DNS-запросы.

Заключение
====================

В этом уроке мы научились:

* Подключать Raspberry Pi Pico W к Wi-Fi сети
* Проверять базовое подключение к интернету через пинг
* Тестировать DNS-разрешение доменных имен
* Выполнять HTTP-запросы к веб-сайтам
* Использовать светодиод для индикации статуса подключения

Эти базовые навыки можно применить для создания различных устройств, требующих доступа к интернету:

* Метеостанций с загрузкой данных в облако
* Систем умного дома с удаленным управлением
* Устройств мониторинга с оповещениями по электронной почте или через мессенджеры
* Простых веб-серверов для управления устройствами через браузер
* IoT-устройств, взаимодействующих с онлайн-сервисами

Полный код программы
========================================

.. code-block:: python

   import network
   import time
   import socket
   from machine import Pin
   
   # Настройка пина для встроенного светодиода
   led = Pin("LED", Pin.OUT)
   
   # Параметры Wi-Fi сети
   SSID = "YOUR_WIFI_SSID"        # Замените на имя вашей Wi-Fi сети
   PASSWORD = "YOUR_WIFI_PASSWORD" # Замените на пароль вашей Wi-Fi сети
   
   # Функция для подключения к Wi-Fi
   def connect_to_wifi():
       # Инициализация интерфейса WLAN в режиме станции (клиента)
       wlan = network.WLAN(network.STA_IF)
       wlan.active(True)
       
       # Проверка статуса подключения
       if wlan.isconnected():
           print("Уже подключено к Wi-Fi")
           return wlan
       
       # Начинаем подключение к Wi-Fi сети
       print(f"Подключение к Wi-Fi сети: {SSID}...")
       wlan.connect(SSID, PASSWORD)
       
       # Ожидание подключения с таймаутом
       max_wait = 20  # максимальное время ожидания в секундах
       timeout = False
       
       while max_wait > 0:
           if wlan.isconnected():
               break
           max_wait -= 1
           print("Ожидание подключения...")
           time.sleep(1)
           led.toggle()  # Мигаем светодиодом во время подключения
       
       # Проверка успешности подключения
       if wlan.isconnected():
           led.on()  # Включаем светодиод при успешном подключении
           ip_address = wlan.ifconfig()[0]
           print(f"Подключено к Wi-Fi! IP-адрес: {ip_address}")
           return wlan
       else:
           led.off()  # Выключаем светодиод при неудачном подключении
           print("Не удалось подключиться к Wi-Fi. Проверьте параметры сети.")
           return None
   
   # Функция для проверки подключения к интернету (пинг)
   def ping_google_dns():
       try:
           # Создаем сокет для подключения к Google DNS (8.8.8.8)
           s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
           s.settimeout(1)
           
           # Пытаемся отправить сообщение на Google DNS
           s.sendto(b'', ('8.8.8.8', 53))
           s.close()
           return True
       except:
           return False
   
   # Функция для проверки DNS-разрешения
   def check_dns_resolution(hostname="google.com"):
       try:
           # Попытка получить IP-адрес по доменному имени
           ip_address = socket.getaddrinfo(hostname, 80)[0][-1][0]
           print(f"DNS-разрешение для {hostname}: {ip_address}")
           return True
       except Exception as e:
           print(f"Ошибка DNS-разрешения: {e}")
           return False
   
   # Функция для проверки HTTP-запроса
   def check_http_request(url="http://www.google.com"):
       try:
           # Разбираем URL
           _, _, host, path = url.split('/', 3)
           if ":" in host:
               host, port = host.split(':')
               port = int(port)
           else:
               port = 80
           
           # Создаем сокет и подключаемся к серверу
           s = socket.socket()
           s.settimeout(5)
           s.connect((host, port))
           
           # Формируем HTTP-запрос
           request = f"GET /{path} HTTP/1.0\r\nHost: {host}\r\n\r\n"
           s.send(request.encode())
           
           # Получаем и выводим ответ
           response = s.recv(512)
           s.close()
           
           print("HTTP-ответ получен:")
           print(response.decode('utf-8').split('\r\n')[0])  # Выводим только статус
           return True
       except Exception as e:
           print(f"Ошибка HTTP-запроса: {e}")
           return False
   
   # Основной цикл программы
   def main():
       print("Проверка подключения к интернету на Raspberry Pi Pico W")
       print("--------------------------------------------------")
       
       # Подключаемся к Wi-Fi
       wlan = connect_to_wifi()
       
       if wlan is None:
           print("Невозможно продолжить без подключения к Wi-Fi.")
           return
       
       try:
           # Ждем стабилизации соединения
           time.sleep(2)
           
           # Проверяем подключение к интернету
           print("\nПроверка подключения к интернету...")
           
           # Проверка пинга
           print("\n1. Проверка пинга до Google DNS (8.8.8.8):")
           if ping_google_dns():
               print("Пинг успешен! Базовое подключение к интернету работает.")
           else:
               print("Пинг не удался. Возможно, проблемы с подключением.")
           
           # Проверка DNS
           print("\n2. Проверка DNS-разрешения:")
           check_dns_resolution()
           
           # Проверка HTTP
           print("\n3. Проверка HTTP-запроса:")
           check_http_request()
           
           print("\nПроверка подключения завершена.")
           
           # Мигаем светодиодом, чтобы показать завершение всех проверок
           for _ in range(5):
               led.toggle()
               time.sleep(0.2)
           
           # Оставляем светодиод включенным, если подключение работает
           led.on()
           
       except KeyboardInterrupt:
           # Выключаем светодиод при завершении
           led.off()
           print("\nПрограмма завершена пользователем.")
   
   # Запускаем программу
   if __name__ == "__main__":
       main()