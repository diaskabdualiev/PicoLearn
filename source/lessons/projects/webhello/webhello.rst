Hello World: веб-сайт на Pico W
===============================================================================

Введение
-------------------------------------------------------------------------------

В этом уроке мы научимся создавать простой веб-сервер на Raspberry Pi Pico W, который будет отвечать на запросы фразой "Hello, World!". Мы разберем, как подключить Pico W к WiFi сети с использованием отдельного конфигурационного файла, и как создать минимальный веб-сервер на MicroPython.

Необходимые компоненты
-------------------------------------------------------------------------------

* Raspberry Pi Pico W (обязательно версия с WiFi модулем)
* Компьютер с USB-портом и доступом к сети WiFi
* Micro-USB кабель для подключения Pico W к компьютеру
* Доступ к WiFi сети с частотой 2.4 ГГц (Pico W не поддерживает сети 5 ГГц)

Структура проекта
-------------------------------------------------------------------------------

Для организации нашего проекта мы создадим три файла:

1. ``config.py`` - конфигурационный файл с параметрами WiFi сети
2. ``index.html`` - простая HTML-страница для отображения в браузере
3. ``main.py`` - основной файл программы с веб-сервером

Шаг 1: Создание конфигурационного файла
-------------------------------------------------------------------------------

Сначала создадим файл ``config.py`` с параметрами подключения к WiFi:

.. code-block:: python
   :caption: config.py

   # Настройки WiFi
   SSID = "Имя_вашей_WiFi_сети"
   PASSWORD = "Пароль_от_WiFi_сети"

   # Настройки веб-сервера
   PORT = 80

В этом файле мы храним:

* SSID - название вашей WiFi сети
* PASSWORD - пароль от вашей WiFi сети
* PORT - порт, на котором будет работать веб-сервер (стандартный HTTP порт - 80)

.. note::
   Замените "Имя_вашей_WiFi_сети" и "Пароль_от_WiFi_сети" на реальные данные вашей WiFi сети.

Шаг 2: Создание HTML-страницы
-------------------------------------------------------------------------------

Теперь создадим простую HTML-страницу:

.. code-block:: html
   :caption: index.html

   <!DOCTYPE html>
   <html>
   <head>
       <title>Pico W Server</title>
       <meta name="viewport" content="width=device-width, initial-scale=1">
   </head>
   <body>
       <h1>Hello, World!</h1>
       <p>Вы успешно запустили веб-сервер на Raspberry Pi Pico W.</p>
       <p>IP-адрес: {IP_ADDRESS}</p>
       <p>Время работы: {UPTIME} сек.</p>
   </body>
   </html>

В этом файле мы создаем простую HTML-страницу со следующими элементами:

* Заголовок страницы "Pico W Server"
* Мета-тег для корректного отображения на мобильных устройствах
* Заголовок H1 "Hello, World!"
* Информационные параграфы
* Специальные плейсхолдеры {IP_ADDRESS} и {UPTIME}, которые будут заменены на реальные значения

Шаг 3: Написание основного кода
-------------------------------------------------------------------------------

Теперь создадим файл main.py. Рассмотрим его по частям для лучшего понимания.

Импорт необходимых библиотек:

.. code-block:: python
   :caption: main.py (импорты)

   import network
   import socket
   import time
   from machine import Pin, Timer
   import gc

   # Импортируем настройки из конфигурационного файла
   import config

Здесь мы импортируем:

* network - для работы с WiFi
* socket - для создания сетевых соединений
* time - для задержек
* Pin и Timer из machine - для работы со светодиодом и таймером
* gc - сборщик мусора для оптимизации памяти
* config - наш конфигурационный файл с настройками WiFi

Настройка светодиода и таймера:

.. code-block:: python
   :caption: main.py (настройка светодиода и таймера)

   # Настраиваем встроенный светодиод для индикации статуса
   led = Pin("LED", Pin.OUT)

   # Счетчик времени работы
   uptime_seconds = 0
   timer = Timer()

В этой части:

* Настраиваем встроенный светодиод Pico W как выход для индикации статуса
* Создаем переменную uptime_seconds для отслеживания времени работы
* Инициализируем объект Timer для подсчета времени

Вспомогательные функции для работы светодиода и таймера:

.. code-block:: python
   :caption: main.py (вспомогательные функции)

   def blink_led(n, delay=0.2):
       """Мигает светодиодом n раз"""
       for _ in range(n):
           led.on()
           time.sleep(delay)
           led.off()
           time.sleep(delay)

   def increment_uptime(timer):
       """Увеличивает счетчик времени работы"""
       global uptime_seconds
       uptime_seconds += 1

Эти функции:

* blink_led - мигает светодиодом заданное количество раз с определенной задержкой
* increment_uptime - функция обратного вызова для таймера, увеличивает счетчик времени работы

Функция подключения к WiFi:

.. code-block:: python
   :caption: main.py (первая часть подключения к WiFi)

   def connect_to_wifi():
       """Подключение к WiFi сети"""
       # Индикация начала подключения к WiFi
       blink_led(3, 0.1)
       
       # Включаем WiFi
       wlan = network.WLAN(network.STA_IF)
       wlan.active(True)
       
       # Начинаем подключение к сети
       print(f"Подключение к WiFi сети: {config.SSID}")
       wlan.connect(config.SSID, config.PASSWORD)

В первой части функции connect_to_wifi:

* Мигаем светодиодом 3 раза для индикации начала подключения
* Создаем объект WLAN в режиме станции (STA_IF) для подключения к существующей сети
* Активируем WiFi модуль и начинаем подключение с параметрами из config.py

Ожидание подключения к WiFi:

.. code-block:: python
   :caption: main.py (ожидание подключения к WiFi)

       # Ждем подключения с таймаутом в 10 секунд
       max_wait = 10
       while max_wait > 0:
           if wlan.status() < 0 or wlan.status() >= 3:
               break
           max_wait -= 1
           print("Ожидание подключения...")
           time.sleep(1)
       
       # Проверяем статус подключения
       if wlan.status() != 3:
           print("Не удалось подключиться к WiFi")
           blink_led(5, 0.5)  # Индикация ошибки
           return None

В этой части функции:

* Устанавливаем таймаут 10 секунд для ожидания подключения
* В цикле проверяем статус подключения:

  * status < 0 означает ошибку
  * status >= 3 означает, что процесс подключения завершен (успешно или с ошибкой)

* Если статус не равен 3 (STAT_GOT_IP), выводим сообщение об ошибке, мигаем светодиодом и возвращаем None

Завершение подключения к WiFi:

.. code-block:: python
   :caption: main.py (завершение подключения к WiFi)

       # Успешное подключение
       ip_address = wlan.ifconfig()[0]
       print(f"Подключено! IP-адрес: {ip_address}")
       blink_led(2, 0.5)  # Индикация успеха
       
       return ip_address

При успешном подключении:

* Получаем IP-адрес устройства с помощью wlan.ifconfig()[0]
* Выводим сообщение об успешном подключении и полученный IP-адрес
* Мигаем светодиодом 2 раза для индикации успеха
* Возвращаем полученный IP-адрес

Функция для чтения HTML файла:

.. code-block:: python
   :caption: main.py (чтение HTML файла)

   def read_html_file():
       """Чтение HTML файла из памяти"""
       try:
           with open('index.html', 'r') as file:
               return file.read()
       except OSError:
           print("Ошибка при чтении HTML файла")
           return "<html><body><h1>Hello, World!</h1></body></html>"

Эта функция:

* Пытается открыть и прочитать файл index.html
* В случае успеха возвращает содержимое файла
* В случае ошибки (например, если файл не найден), возвращает простой HTML-код с "Hello, World!"

Инициализация веб-сервера:

.. code-block:: python
   :caption: main.py (инициализация веб-сервера)

   def start_web_server(ip_address):
       """Запуск веб-сервера"""
       # Настраиваем сокет
       addr = socket.getaddrinfo('0.0.0.0', config.PORT)[0][-1]
       s = socket.socket()
       s.bind(addr)
       s.listen(1)
       
       print(f"Веб-сервер запущен на http://{ip_address}:{config.PORT}")
       
       # Запускаем таймер для отслеживания времени работы
       timer.init(period=1000, mode=Timer.PERIODIC, callback=increment_uptime)
       
       # Загружаем шаблон HTML
       html_template = read_html_file()

В этой части:

* Создаем сокет и настраиваем его для прослушивания указанного порта
* Выводим информацию о запущенном веб-сервере с его адресом
* Инициализируем таймер для отслеживания времени работы (вызывает функцию increment_uptime каждую секунду)
* Загружаем HTML шаблон из файла с помощью функции read_html_file

Цикл обработки запросов:

.. code-block:: python
   :caption: main.py (цикл обработки запросов)

       # Ожидаем и обрабатываем запросы
       while True:
           try:
               # Собираем мусор для освобождения памяти
               gc.collect()
               
               # Принимаем подключение
               client, addr = s.accept()
               print(f"Подключение от: {addr}")
               
               # Мигаем светодиодом при каждом запросе
               led.on()
               
               # Читаем запрос
               request = client.recv(1024)
               
               # Подготавливаем HTML с актуальными данными
               html = html_template.replace("{IP_ADDRESS}", ip_address).replace("{UPTIME}", str(uptime_seconds))

В цикле обработки запросов:

* Вызываем сборщик мусора для оптимизации использования памяти
* Ожидаем и принимаем подключение с помощью s.accept()
* Включаем светодиод для индикации активности
* Читаем запрос от клиента (до 1024 байт)
* Подготавливаем HTML-ответ, заменяя плейсхолдеры на актуальные значения

Отправка ответа:

.. code-block:: python
   :caption: main.py (отправка ответа)

               # Отправляем ответ
               client.send('HTTP/1.0 200 OK\r\nContent-type: text/html\r\n\r\n')
               client.send(html)
               
               # Закрываем соединение
               client.close()
               
               # Выключаем светодиод
               led.off()
               
           except Exception as e:
               print(f"Ошибка при обработке запроса: {e}")
               led.off()

При отправке ответа:

* Отправляем HTTP заголовки с кодом 200 OK и типом содержимого text/html
* Отправляем подготовленный HTML-контент
* Закрываем соединение с клиентом
* Выключаем светодиод
* Обрабатываем возможные исключения и выводим сообщение об ошибке

Основная функция:

.. code-block:: python
   :caption: main.py (основная функция)

   def main():
       """Основная функция"""
       print("Запуск Hello World веб-сервера на Pico W")
       
       # Подключаемся к WiFi
       ip_address = connect_to_wifi()
       if ip_address:
           # Запускаем веб-сервер
           start_web_server(ip_address)
       else:
           # Если не удалось подключиться, мигаем светодиодом в режиме ошибки
           while True:
               blink_led(5, 0.2)
               time.sleep(1)

   # Запускаем программу
   if __name__ == "__main__":
       main()

Основная функция:

* Выводит сообщение о запуске веб-сервера
* Вызывает функцию connect_to_wifi для подключения к WiFi
* Если подключение успешно (получен IP-адрес), запускает веб-сервер
* Если подключение не удалось, входит в режим индикации ошибки, бесконечно мигая светодиодом

В последней строке кода проверяется, что файл запущен напрямую (не импортирован), и если это так, вызывается функция main().

Загрузка и запуск программы
-------------------------------------------------------------------------------

Для запуска проекта:

1. Подключите Raspberry Pi Pico W к компьютеру через USB-кабель
2. Скопируйте файлы ``config.py``, ``index.html`` и ``main.py`` на Pico W
3. Обновите ``config.py`` с параметрами вашей WiFi сети
4. Перезагрузите Pico W (отключите и подключите заново или нажмите кнопку RESET)

После перезагрузки Pico W:

* Подключится к WiFi сети (если успешно - светодиод мигнет дважды)
* Запустит веб-сервер
* В консоли будет выведен IP-адрес

Проверка работы веб-сервера
-------------------------------------------------------------------------------

Чтобы проверить работу веб-сервера:

1. Посмотрите IP-адрес Pico W в консоли
2. Откройте браузер на устройстве, подключенном к той же WiFi сети
3. Введите в адресную строку: ``http://IP-адрес`` (например, ``http://192.168.1.100``)
4. Вы должны увидеть страницу с сообщением "Hello, World!" и информацией о Pico W

При каждом обновлении страницы:

* На Pico W будет кратковременно загораться светодиод
* Счетчик времени работы на странице будет увеличиваться

Возможные проблемы и их решения
-------------------------------------------------------------------------------

1. **Не удается подключиться к WiFi**
   
   * Проверьте правильность SSID и пароля в файле ``config.py``
   * Убедитесь, что WiFi сеть работает на частоте 2.4 ГГц (Pico W не поддерживает 5 ГГц)
   * Проверьте, что Pico W находится в зоне действия WiFi сети

2. **Не удается получить доступ к веб-серверу**
   
   * Убедитесь, что устройство подключено к той же WiFi сети
   * Проверьте, правильно ли введен IP-адрес в браузере
   * Перезагрузите Pico W и обратите внимание на новый IP-адрес в консоли

3. **Светодиод быстро мигает 5 раз и повторяет**
   
   * Это указывает на ошибку подключения к WiFi
   * Проверьте настройки WiFi в config.py
   * Убедитесь, что сеть доступна и в зоне действия

Заключение
-------------------------------------------------------------------------------

В этом уроке мы научились:

* Создавать конфигурационный файл для WiFi соединения
* Подключать Raspberry Pi Pico W к WiFi сети
* Создавать простой веб-сервер на MicroPython
* Отображать "Hello, World!" страницу с динамическим содержимым
* Использовать светодиод для индикации статуса

Этот проект является отличной основой для создания более сложных веб-приложений на базе Raspberry Pi Pico W.

Полный код программы
-------------------------------------------------------------------------------

Вот полный код всех файлов проекта:

.. code-block:: python
   :caption: config.py (полный код)

   # Настройки WiFi
   SSID = "Имя_вашей_WiFi_сети"
   PASSWORD = "Пароль_от_WiFi_сети"

   # Настройки веб-сервера
   PORT = 80

.. code-block:: html
   :caption: index.html (полный код)

   <!DOCTYPE html>
   <html>
   <head>
       <title>Pico W Server</title>
       <meta name="viewport" content="width=device-width, initial-scale=1">
   </head>
   <body>
       <h1>Hello, World!</h1>
       <p>Вы успешно запустили веб-сервер на Raspberry Pi Pico W.</p>
       <p>IP-адрес: {IP_ADDRESS}</p>
       <p>Время работы: {UPTIME} сек.</p>
   </body>
   </html>

.. code-block:: python
   :caption: main.py (полный код)

   import network
   import socket
   import time
   from machine import Pin, Timer
   import gc

   # Импортируем настройки из конфигурационного файла
   import config

   # Настраиваем встроенный светодиод для индикации статуса
   led = Pin("LED", Pin.OUT)

   # Счетчик времени работы
   uptime_seconds = 0
   timer = Timer()

   def blink_led(n, delay=0.2):
       """Мигает светодиодом n раз"""
       for _ in range(n):
           led.on()
           time.sleep(delay)
           led.off()
           time.sleep(delay)

   def increment_uptime(timer):
       """Увеличивает счетчик времени работы"""
       global uptime_seconds
       uptime_seconds += 1

   def connect_to_wifi():
       """Подключение к WiFi сети"""
       # Индикация начала подключения к WiFi
       blink_led(3, 0.1)
       
       # Включаем WiFi
       wlan = network.WLAN(network.STA_IF)
       wlan.active(True)
       
       # Начинаем подключение к сети
       print(f"Подключение к WiFi сети: {config.SSID}")
       wlan.connect(config.SSID, config.PASSWORD)
       
       # Ждем подключения с таймаутом в 10 секунд
       max_wait = 10
       while max_wait > 0:
           if wlan.status() < 0 or wlan.status() >= 3:
               break
           max_wait -= 1
           print("Ожидание подключения...")
           time.sleep(1)
       
       # Проверяем статус подключения
       if wlan.status() != 3:
           print("Не удалось подключиться к WiFi")
           blink_led(5, 0.5)  # Индикация ошибки
           return None
       
       # Успешное подключение
       ip_address = wlan.ifconfig()[0]
       print(f"Подключено! IP-адрес: {ip_address}")
       blink_led(2, 0.5)  # Индикация успеха
       
       return ip_address

   def read_html_file():
       """Чтение HTML файла из памяти"""
       try:
           with open('index.html', 'r') as file:
               return file.read()
       except OSError:
           print("Ошибка при чтении HTML файла")
           return "<html><body><h1>Hello, World!</h1></body></html>"

   def start_web_server(ip_address):
       """Запуск веб-сервера"""
       # Настраиваем сокет
       addr = socket.getaddrinfo('0.0.0.0', config.PORT)[0][-1]
       s = socket.socket()
       s.bind(addr)
       s.listen(1)
       
       print(f"Веб-сервер запущен на http://{ip_address}:{config.PORT}")
       
       # Запускаем таймер для отслеживания времени работы
       timer.init(period=1000, mode=Timer.PERIODIC, callback=increment_uptime)
       
       # Загружаем шаблон HTML
       html_template = read_html_file()
       
       # Ожидаем и обрабатываем запросы
       while True:
           try:
               # Собираем мусор для освобождения памяти
               gc.collect()
               
               # Принимаем подключение
               client, addr = s.accept()
               print(f"Подключение от: {addr}")
               
               # Мигаем светодиодом при каждом запросе
               led.on()
               
               # Читаем запрос
               request = client.recv(1024)
               
               # Подготавливаем HTML с актуальными данными
               html = html_template.replace("{IP_ADDRESS}", ip_address).replace("{UPTIME}", str(uptime_seconds))
               
               # Отправляем ответ
               client.send('HTTP/1.0 200 OK\r\nContent-type: text/html\r\n\r\n')
               client.send(html)
               
               # Закрываем соединение
               client.close()
               
               # Выключаем светодиод
               led.off()
               
           except Exception as e:
               print(f"Ошибка при обработке запроса: {e}")
               led.off()

   def main():
       """Основная функция"""
       print("Запуск Hello World веб-сервера на Pico W")
       
       # Подключаемся к WiFi
       ip_address = connect_to_wifi()
       if ip_address:
           # Запускаем веб-сервер
           start_web_server(ip_address)
       else:
           # Если не удалось подключиться, мигаем светодиодом в режиме ошибки
           while True:
               blink_led(5, 0.2)
               time.sleep(1)

   # Запускаем программу
   if __name__ == "__main__":
       main()