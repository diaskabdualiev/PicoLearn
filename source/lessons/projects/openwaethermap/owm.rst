OpenWeatherMap: вывод данных о погоде на OLED-дисплей
=====================================================================

Введение
-----------------------------------------

В этом уроке мы научимся получать данные о погоде с сервиса OpenWeatherMap и отображать их на OLED-дисплее SSD1306 с помощью Raspberry Pi Pico W. Наше устройство будет подключаться к Wi-Fi, запрашивать текущие данные о погоде через API и отображать температуру, влажность, давление и краткое описание погодных условий на дисплее. Это отличный проект для создания персональной метеостанции или информационного дисплея.

Необходимые компоненты
-----------------------------------------

- Raspberry Pi Pico W
- OLED-дисплей SSD1306 с интерфейсом I2C (128x64 пикселей)
- Соединительные провода
- Макетная плата (опционально)
- Активный API-ключ от OpenWeatherMap (бесплатный)

Подготовка к работе с OpenWeatherMap
-----------------------------------------

Перед началом работы необходимо получить API-ключ от сервиса OpenWeatherMap:

1. Зарегистрируйтесь на сайте [OpenWeatherMap](https://openweathermap.org/)
2. После регистрации перейдите в свой профиль и найдите раздел "API keys"
3. Создайте новый ключ или используйте ключ по умолчанию
4. Запишите ваш API-ключ - он будет использоваться в нашей программе

.. note::
    
    Бесплатный план OpenWeatherMap позволяет делать до 1000 запросов в день и до 60 запросов в минуту, чего более чем достаточно для нашего проекта.

Схема подключения
-----------------------------------------

OLED-дисплей SSD1306 подключается к Raspberry Pi Pico W через интерфейс I2C:

- VCC дисплея к 3.3V (PIN 36) Pico W
- GND дисплея к GND (PIN 38) Pico W
- SCL дисплея к GP1 (PIN 2) Pico W - это I2C0 SCL
- SDA дисплея к GP0 (PIN 1) Pico W - это I2C0 SDA

.. note::
    
    Убедитесь, что ваш OLED-дисплей рассчитан на напряжение 3.3В. Если ваш дисплей рассчитан на 5В, но работает и с 3.3В (многие современные дисплеи совместимы), то подключение безопасно.

Структура проекта
-----------------------------------------

Наш проект будет состоять из следующих файлов:
- config.py - конфигурационный файл (логин/пароль Wi-Fi, API-ключ, город)
- main.py - основной файл программы
- ssd1306.py - библиотека для работы с OLED-дисплеем (уже включена в micropython-lib)

Код проекта
-----------------------------------------

1. Сначала создадим файл конфигурации (config.py):

.. code-block:: python

    # Конфигурационный файл для проекта OpenWeather OLED
    
    # Настройки Wi-Fi
    WIFI_SSID = "Название_вашей_сети"
    WIFI_PASSWORD = "Пароль_вашей_сети"
    
    # Настройки OpenWeatherMap
    OWM_API_KEY = "ваш_api_ключ_openweathermap"
    CITY_NAME = "Moscow"  # Название города на английском
    
    # Параметры обновления данных
    UPDATE_INTERVAL = 10 * 60  # Интервал обновления данных в секундах (10 минут)

2. Создадим основной файл программы (main.py):

.. code-block:: python

    import network
    import time
    import urequests as requests
    import json
    import machine
    from machine import Pin, I2C
    import ssd1306
    import gc
    
    # Импортируем настройки из config.py
    from config import WIFI_SSID, WIFI_PASSWORD, OWM_API_KEY, CITY_NAME, UPDATE_INTERVAL
    
    # Настройка пина для встроенного светодиода
    led = Pin("LED", Pin.OUT)
    
    # Настройка I2C для OLED-дисплея
    i2c = I2C(0, scl=Pin(1), sda=Pin(0), freq=400000)
    
    # Размеры дисплея
    DISPLAY_WIDTH = 128
    DISPLAY_HEIGHT = 64
    
    # Инициализация дисплея
    try:
        display = ssd1306.SSD1306_I2C(DISPLAY_WIDTH, DISPLAY_HEIGHT, i2c)
        display_available = True
    except Exception as e:
        print("Ошибка инициализации дисплея:", e)
        display_available = False
    
    # Функция для мигания встроенным светодиодом
    def blink_led(times=1, delay=0.2):
        for _ in range(times):
            led.on()
            time.sleep(delay)
            led.off()
            time.sleep(delay)
    
    # Функция для отображения сообщения на дисплее
    def show_message(title, lines, clear=True):
        if not display_available:
            return
            
        if clear:
            display.fill(0)  # Очищаем дисплей
            
        # Отображаем заголовок
        display.text(title, 0, 0, 1)
        display.hline(0, 10, DISPLAY_WIDTH, 1)  # Горизонтальная линия под заголовком
        
        # Отображаем строки текста
        y = 12
        for line in lines:
            display.text(line, 0, y, 1)
            y += 10
            
        # Обновляем дисплей
        display.show()
    
    # Функция для подключения к Wi-Fi
    def connect_to_wifi():
        # Показываем сообщение о загрузке
        show_message("Weather Station", ["Connecting to WiFi", f"SSID: {WIFI_SSID}"])
        
        # Настраиваем Wi-Fi интерфейс
        wlan = network.WLAN(network.STA_IF)
        wlan.active(True)
        
        # Если уже подключены - отключаемся
        if wlan.isconnected():
            wlan.disconnect()
            time.sleep(1)
        
        print(f"Подключение к Wi-Fi сети {WIFI_SSID}...")
        
        # Пытаемся подключиться к Wi-Fi
        wlan.connect(WIFI_SSID, WIFI_PASSWORD)
        
        # Ждем подключения с таймаутом
        max_wait = 20
        while max_wait > 0:
            if wlan.isconnected():
                break
            
            # Мигаем светодиодом в процессе подключения
            blink_led(1, 0.1)
            
            max_wait -= 1
            print("Ожидание подключения...")
            
            # Обновляем сообщение на дисплее с точками
            dots = "." * ((20 - max_wait) % 4 + 1)
            show_message("Weather Station", [f"Connecting{dots}", f"SSID: {WIFI_SSID}"])
            
            time.sleep(1)
        
        # Проверяем результат подключения
        if wlan.isconnected():
            ip_address = wlan.ifconfig()[0]
            print(f"Подключено к Wi-Fi! IP-адрес: {ip_address}")
            
            # Отображаем информацию на дисплее
            show_message("Weather Station", [
                "WiFi Connected!",
                f"IP: {ip_address}",
                "Getting weather..."
            ])
            
            # Быстро мигаем светодиодом при успешном подключении
            blink_led(3, 0.1)
            
            return True
        else:
            print("Не удалось подключиться к Wi-Fi")
            
            # Отображаем сообщение об ошибке на дисплее
            show_message("WiFi Error", [
                "Failed to connect",
                f"to {WIFI_SSID}",
                "Check credentials",
                "or signal strength"
            ])
            
            # Медленно мигаем светодиодом при ошибке
            blink_led(3, 0.5)
            
            return False
    
    # Функция для получения данных о погоде
    def get_weather_data():
        # API URL для текущей погоды
        url = f"https://api.openweathermap.org/data/2.5/weather?q={CITY_NAME}&appid={OWM_API_KEY}&units=metric"
        
        try:
            # Делаем запрос к API
            print(f"Запрос данных о погоде для города {CITY_NAME}...")
            response = requests.get(url)
            
            # Проверяем статус ответа
            if response.status_code == 200:
                # Парсим JSON-ответ
                weather_data = response.json()
                response.close()
                
                # Выводим данные для отладки
                print("Получены данные о погоде:")
                print(f"Температура: {weather_data['main']['temp']}°C")
                print(f"Описание: {weather_data['weather'][0]['description']}")
                
                return weather_data
            else:
                print(f"Ошибка запроса: статус {response.status_code}")
                response.close()
                return None
        except Exception as e:
            print(f"Ошибка при получении данных о погоде: {e}")
            return None
    
    # Функция для обработки данных о погоде и формирования текста для отображения
    def process_weather_data(weather_data):
        if not weather_data:
            return ["Error: No data", "Check connection", "or API key"]
        
        try:
            # Извлекаем нужные данные
            temp = weather_data['main']['temp']
            humidity = weather_data['main']['humidity']
            pressure = weather_data['main']['pressure']
            description = weather_data['weather'][0]['description']
            wind_speed = weather_data['wind']['speed']
            city = weather_data['name']
            
            # Переводим первую букву описания в верхний регистр
            description = description[0].upper() + description[1:]
            
            # Форматируем данные для отображения
            temp_text = f"Temp: {temp:.1f} C"
            humid_text = f"Humidity: {humidity}%"
            press_text = f"Press: {pressure} hPa"
            wind_text = f"Wind: {wind_speed} m/s"
            
            # Возвращаем список строк для отображения
            return [
                f"{city}",
                temp_text,
                description,
                humid_text,
                press_text,
                wind_text
            ]
        except KeyError as e:
            print(f"Ошибка при обработке данных о погоде: {e}")
            return ["Error: Invalid data", "Check API response"]
    
    # Функция для отображения данных о погоде на дисплее
    def display_weather(weather_data):
        if not display_available:
            print("Дисплей недоступен")
            return
        
        # Обрабатываем данные о погоде
        weather_lines = process_weather_data(weather_data)
        
        # Получаем текущее время для отображения
        rtc = machine.RTC()
        datetime = rtc.datetime()
        time_str = f"{datetime[4]:02d}:{datetime[5]:02d}"
        
        # Отображаем данные на дисплее
        show_message(f"Weather {time_str}", weather_lines)
    
    # Главная функция программы
    def main():
        if not display_available:
            print("ОШИБКА: OLED-дисплей не найден или неправильно подключен!")
            # Мигаем светодиодом в режиме ошибки
            while True:
                blink_led(5, 0.1)
                time.sleep(1)
                
        # Отображаем приветственное сообщение
        show_message("Weather Station", ["Starting...", "Raspberry Pi Pico W"])
        time.sleep(1)
        
        # Подключаемся к Wi-Fi
        if not connect_to_wifi():
            # Если не удалось подключиться, перезагружаем устройство через 10 секунд
            time.sleep(10)
            machine.reset()
            
        # Основной цикл программы
        last_update_time = 0
        
        while True:
            current_time = time.time()
            
            # Проверяем, нужно ли обновить данные о погоде
            if current_time - last_update_time >= UPDATE_INTERVAL:
                # Включаем светодиод для индикации обновления
                led.on()
                
                # Получаем данные о погоде
                weather_data = get_weather_data()
                
                # Отображаем данные на дисплее
                if weather_data:
                    display_weather(weather_data)
                    last_update_time = current_time
                else:
                    show_message("Error", [
                        "Failed to get",
                        "weather data",
                        "Retrying in 1 min"
                    ])
                    # Если не удалось получить данные, пробуем через минуту
                    last_update_time = current_time - UPDATE_INTERVAL + 60
                
                # Выключаем светодиод
                led.off()
                
                # Очищаем память
                gc.collect()
            
            # Мигаем светодиодом для индикации работы
            blink_led(1, 0.1)
            
            # Ждем перед следующей проверкой
            time.sleep(5)
    
    # Запускаем программу
    if __name__ == "__main__":
        main()

Загрузка и запуск проекта
-----------------------------------------

1. Сначала вам нужно зарегистрироваться на OpenWeatherMap и получить API-ключ, как описано в разделе "Подготовка к работе с OpenWeatherMap".

2. Убедитесь, что библиотека ssd1306.py установлена в вашей системе MicroPython. Если нет, вы можете загрузить её из официального репозитория micropython-lib.

3. Подключите Raspberry Pi Pico W к компьютеру через USB.

4. Установите Thonny IDE или другую среду разработки для MicroPython, если у вас её ещё нет.

5. Создайте и загрузите на Pico W следующие файлы:
   - config.py (с вашими настройками Wi-Fi и API-ключом OpenWeatherMap)
   - main.py
   - ssd1306.py (если её нет в прошивке)

6. Отредактируйте файл config.py, указав:
   - Имя и пароль вашей Wi-Fi сети
   - Ваш API-ключ OpenWeatherMap
   - Название вашего города на английском языке
   - При желании измените интервал обновления данных (по умолчанию 10 минут)

7. Убедитесь, что OLED-дисплей правильно подключен к Pico W согласно схеме.

8. Запустите программу, нажав кнопку Run в Thonny или перезагрузив Pico W.

9. После успешного запуска вы увидите на OLED-дисплее информацию о подключении к Wi-Fi, а затем - текущие данные о погоде, которые будут обновляться с заданным интервалом.

Как это работает
-----------------------------------------

1. **Подключение к Wi-Fi**:
   - Программа инициализирует Wi-Fi модуль и подключается к заданной сети.
   - В процессе подключения на дисплее отображается статус соединения.

2. **Получение данных о погоде**:
   - После подключения к Wi-Fi, программа отправляет HTTP-запрос к API OpenWeatherMap.
   - В запросе указывается название города, единицы измерения (метрические) и API-ключ.
   - API возвращает данные в формате JSON, которые затем разбираются программой.

3. **Обработка данных**:
   - Из JSON-ответа извлекаются нужные нам данные: температура, влажность, давление, скорость ветра и описание погоды.
   - Данные форматируются для отображения на дисплее с ограниченной шириной.

4. **Отображение на дисплее**:
   - Обработанные данные о погоде выводятся на OLED-дисплей.
   - В заголовке отображается название "Weather" и текущее время.
   - В основной части экрана показываются название города, температура, описание погоды, влажность, давление и скорость ветра.

5. **Периодическое обновление**:
   - Программа работает в бесконечном цикле и обновляет данные о погоде с интервалом, указанным в config.py.
   - Во время обновления данных индикатором служит встроенный светодиод.

Возможные проблемы и их решения
-----------------------------------------

1. **Ошибка "Дисплей не инициализирован"**:
   - Проверьте правильность подключения проводов дисплея (SDA, SCL, VCC, GND).
   - Убедитесь, что ваш дисплей работает с напряжением 3.3В.
   - Попробуйте изменить адрес I2C в коде инициализации дисплея, если у вашего дисплея другой адрес.

2. **Ошибка подключения к Wi-Fi**:
   - Убедитесь, что вы указали правильный SSID и пароль в файле config.py.
   - Проверьте, что ваша Wi-Fi сеть работает в диапазоне 2.4 ГГц (Pico W не поддерживает 5 ГГц).
   - Перезагрузите Pico W и ваш Wi-Fi роутер.

3. **Ошибка "Failed to get weather data"**:
   - Проверьте, что ваш API-ключ OpenWeatherMap введен правильно.
   - Убедитесь, что название города указано корректно на английском языке.
   - Проверьте подключение к интернету.
   - Проверьте, не превышен ли лимит запросов к API (для бесплатного плана это 1000 запросов в день).

4. **Ошибка "Invalid data"**:
   - Возможно, формат ответа API изменился. Проверьте документацию OpenWeatherMap.
   - Добавьте дополнительную отладочную информацию в код, чтобы видеть полный ответ от API.

5. **Проблемы с отображением текста**:
   - Если текст слишком длинный и не помещается на экране, попробуйте сократить выводимую информацию или уменьшить размер шрифта.
   - Для дисплеев с разрешением 128x32 вместо 128x64 измените значение DISPLAY_HEIGHT и отображайте меньше строк информации.

Расширение проекта
-----------------------------------------

1. **Добавление прогноза погоды**:
   - Измените API-запрос для получения не только текущей погоды, но и прогноза на несколько дней.
   - Добавьте возможность переключения между текущей погодой и прогнозом на будущее.

2. **Улучшение интерфейса**:
   - Добавьте простые графические иконки для отображения погодных условий (солнце, облака, дождь).
   - Создайте анимации для некоторых погодных явлений (например, падающие капли дождя или снежинки).

3. **Добавление датчиков**:
   - Подключите локальные датчики температуры, влажности и давления (например, BME280).
   - Отображайте как данные с интернета, так и локальные измерения для сравнения.

4. **Энергосбережение**:
   - Добавьте режим глубокого сна для экономии энергии.
   - Настройте устройство на пробуждение только для обновления данных, а затем возвращение в режим сна.

5. **Добавление кнопок управления**:
   - Добавьте физические кнопки для переключения между различными экранами с информацией.
   - Реализуйте настройку города или других параметров без необходимости изменять код.

Заключение
-----------------------------------------

В этом уроке мы научились получать данные о погоде с сервиса OpenWeatherMap и отображать их на OLED-дисплее с помощью Raspberry Pi Pico W. Проект демонстрирует, как можно создать простую метеостанцию, которая показывает актуальные данные о погоде без необходимости в дополнительных датчиках.

Этот проект можно использовать как основу для создания более сложных информационных дисплеев или систем умного дома, интегрирующих данные из различных источников и отображающих их в удобном формате.

.. note::
    
    Для экономии числа запросов к API и продления срока службы дисплея можно увеличить интервал обновления данных или настроить периодическое выключение дисплея. Помните, что бесплатный план OpenWeatherMap ограничен 1000 запросами в день - при обновлении каждые 10 минут это составляет 144 запроса в сутки, что вполне укладывается в лимит.
