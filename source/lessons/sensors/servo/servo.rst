============================================================================
Управление сервоприводом с помощью Raspberry Pi Pico
============================================================================

Введение
============

В этом уроке мы научимся подключать и управлять сервоприводом с помощью Raspberry Pi Pico. Сервоприводы - это устройства, позволяющие точно контролировать угол поворота выходного вала. Они широко используются в робототехнике, моделировании и автоматизации. Мы создадим программу, которая позволит нам управлять положением сервопривода, отправляя PWM-сигналы с микроконтроллера.

Необходимые компоненты
==============================================

* Raspberry Pi Pico
* Сервопривод (SG90 или аналогичный)
* Макетная плата
* Соединительные провода
* Микро-USB кабель для питания и программирования
* Внешний источник питания 5В (опционально, для больших сервоприводов)

Структура проекта
================================

Наш проект будет состоять из одного файла:

* **main.py** - основной файл с кодом для управления сервоприводом

Схема подключения
================================

Сервопривод подключается к Raspberry Pi Pico следующим образом:

* Красный провод сервопривода (питание) подключается к пину VBUS (5V) на Pico
* Коричневый или черный провод сервопривода (земля) подключается к пину GND на Pico
* Оранжевый или желтый провод сервопривода (сигнал) подключается к пину GP0 на Pico

.. note::
   Цвета проводов могут отличаться в зависимости от производителя сервопривода. Обычно красный - питание, черный/коричневый - земля, желтый/оранжевый - сигнал. Проверьте документацию вашего сервопривода.

.. warning::
   Если вы используете мощный сервопривод или несколько сервоприводов, рекомендуется использовать внешний источник питания 5В, так как USB-порт может не обеспечить достаточный ток.

Пошаговые инструкции
======================================

Шаг 1: Настройка оборудования
--------------------------------------------------------

1. Установите MicroPython на Raspberry Pi Pico, если это еще не сделано.
2. Соберите схему в соответствии с описанием выше.
3. Подключите Pico к компьютеру через USB-кабель.

Шаг 2: Создание основного файла main.py
--------------------------------------------------------

Создайте файл main.py со следующим содержимым:

.. code-block:: python

   from machine import Pin, PWM
   import time
   
   # Настройка пина для сервопривода
   servo_pin = Pin(0)
   
   # Создание PWM объекта с частотой 50 Гц (стандартная для большинства сервоприводов)
   servo = PWM(servo_pin)
   servo.freq(50)
   
   # Настройка пина для встроенного светодиода
   led = Pin("LED", Pin.OUT)
   
   # Функция для установки угла поворота сервопривода
   def set_servo_angle(angle):
       # Преобразуем угол (0-180) в значение длительности импульса (0-65535)
       # Для большинства сервоприводов:
       # 0 градусов = импульс около 0.5 мс (duty около 1638)
       # 90 градусов = импульс около 1.5 мс (duty около 4915)
       # 180 градусов = импульс около 2.5 мс (duty около 8192)
       min_duty = 1638  # Соответствует 0 градусов
       max_duty = 8192  # Соответствует 180 градусов
       
       # Преобразование угла в длительность импульса
       duty = min_duty + (max_duty - min_duty) * angle / 180
       
       # Установка длительности импульса
       servo.duty_u16(int(duty))
       
       # Мигаем светодиодом для индикации изменения
       led.toggle()
       
       print(f"Угол сервопривода установлен на {angle} градусов (duty = {int(duty)})")

Разберем основные части кода:

1. Импортируем необходимые модули для работы с PWM и таймингом.
2. Настраиваем пин GP0 для подключения сигнального провода сервопривода.
3. Создаем PWM объект с частотой 50 Гц, которая является стандартной для большинства сервоприводов.
4. Настраиваем встроенный светодиод для индикации изменений.
5. Определяем функцию ``set_servo_angle()``, которая:
   * Преобразует угол (0-180 градусов) в значение длительности импульса
   * Устанавливает соответствующую длительность импульса для сервопривода
   * Переключает светодиод для визуальной индикации
   * Выводит информацию об установленном угле в консоль

Теперь добавим примеры использования и основной цикл программы:

.. code-block:: python

   # Функция для демонстрации работы сервопривода
   def servo_demo():
       print("Демонстрация работы сервопривода")
       
       # Перемещение от 0 до 180 градусов
       print("Перемещение от 0 до 180 градусов...")
       for angle in range(0, 181, 10):
           set_servo_angle(angle)
           time.sleep(0.2)
       
       time.sleep(1)
       
       # Перемещение от 180 до 0 градусов
       print("Перемещение от 180 до 0 градусов...")
       for angle in range(180, -1, -10):
           set_servo_angle(angle)
           time.sleep(0.2)
       
       time.sleep(1)
       
       # Перемещение в центральное положение
       print("Перемещение в центральное положение (90 градусов)...")
       set_servo_angle(90)
   
   # Основной цикл программы
   def main():
       print("Управление сервоприводом с помощью Raspberry Pi Pico")
       print("Нажмите Ctrl+C для завершения.")
       print("--------------------------------------------------")
       
       try:
           while True:
               # Запускаем демонстрацию
               servo_demo()
               
               # Ждем некоторое время перед следующей демонстрацией
               time.sleep(2)
               
       except KeyboardInterrupt:
           # Устанавливаем сервопривод в нейтральное положение перед выходом
           set_servo_angle(90)
           # Останавливаем PWM
           servo.deinit()
           print("\nРабота с сервоприводом завершена.")
   
   # Запускаем программу
   if __name__ == "__main__":
       main()

Этот блок кода:

1. Создает функцию ``servo_demo()``, которая демонстрирует различные движения сервопривода:
   * Плавное перемещение от 0 до 180 градусов
   * Плавное перемещение от 180 до 0 градусов
   * Установка в центральное положение (90 градусов)
2. Определяет основную функцию ``main()``, которая:
   * Запускает демонстрацию сервопривода в цикле
   * Обрабатывает прерывание Ctrl+C для корректного завершения
   * Перед выходом устанавливает сервопривод в нейтральное положение и освобождает ресурсы PWM

Инструкции по загрузке и запуску
===============================================

1. Подключите Raspberry Pi Pico к компьютеру через USB-кабель.
2. Скопируйте файл main.py на Pico (можно использовать Thonny IDE или любой другой метод).
3. После загрузки файла программа автоматически запустится.
4. Откройте последовательный порт (в Thonny это происходит автоматически) для просмотра вывода данных.
5. Наблюдайте за движениями сервопривода в соответствии с программой.
6. Для завершения программы нажмите Ctrl+C.

Возможные проблемы и их решения
==============================================

Сервопривод не движется или дрожит
---------------------------------------------------

Если сервопривод не движется должным образом или дрожит, проверьте следующее:

* Убедитесь, что сервопривод получает достаточное питание (5V). При питании от USB, возможно, потребуется внешний источник питания.
* Проверьте правильность подключения всех проводов.
* Попробуйте скорректировать значения ``min_duty`` и ``max_duty`` в функции ``set_servo_angle()``:

.. code-block:: python

   # Для некоторых сервоприводов может потребоваться другой диапазон
   min_duty = 1000  # Попробуйте меньшее значение
   max_duty = 9000  # Попробуйте большее значение

Неправильные углы поворота
-----------------------------------------

Если сервопривод не достигает нужных углов или выходит за пределы, проверьте следующее:

* Откалибруйте значения ``min_duty`` и ``max_duty`` для вашего конкретного сервопривода.
* Помните, что не все сервоприводы имеют диапазон 0-180 градусов. Некоторые могут иметь ограниченный диапазон (например, 0-120 или 0-150 градусов).
* Для более точной калибровки используйте следующий код:

.. code-block:: python

   # Код для калибровки сервопривода
   # Установка минимального угла (0 градусов)
   servo.duty_u16(1638)  # Начальное значение, изменяйте по необходимости
   input("Сервопривод должен быть на 0 градусов. Нажмите Enter для продолжения...")
   
   # Установка среднего угла (90 градусов)
   servo.duty_u16(4915)  # Начальное значение, изменяйте по необходимости
   input("Сервопривод должен быть на 90 градусов. Нажмите Enter для продолжения...")
   
   # Установка максимального угла (180 градусов)
   servo.duty_u16(8192)  # Начальное значение, изменяйте по необходимости
   input("Сервопривод должен быть на 180 градусов. Нажмите Enter для продолжения...")

Нестабильная работа
-----------------------------------------

Если сервопривод работает нестабильно:

* Проверьте качество источника питания. Сервоприводу может требоваться больше тока, чем может предоставить USB-порт.
* Добавьте конденсатор (100-470 мкФ) между VCC и GND для стабилизации питания.
* Убедитесь, что вы не используете слишком много других устройств одновременно с сервоприводом.

Заключение
=====================

В этом уроке мы научились:

* Подключать сервопривод к Raspberry Pi Pico
* Создавать и настраивать PWM-сигналы для управления сервоприводом
* Преобразовывать угол поворота в длительность импульса
* Программировать различные перемещения сервопривода
* Корректно освобождать ресурсы при завершении работы

Этот проект можно расширить различными способами:

* Управление несколькими сервоприводами для создания роботизированных манипуляторов
* Добавление кнопок или потенциометров для интерактивного управления углом
* Интеграция с другими датчиками для создания автоматизированных систем
* Реализация более сложных движений и последовательностей

Полный код программы
=======================================

.. code-block:: python

   from machine import Pin, PWM
   import time
   
   # Настройка пина для сервопривода
   servo_pin = Pin(0)
   
   # Создание PWM объекта с частотой 50 Гц (стандартная для большинства сервоприводов)
   servo = PWM(servo_pin)
   servo.freq(50)
   
   # Настройка пина для встроенного светодиода
   led = Pin("LED", Pin.OUT)
   
   # Функция для установки угла поворота сервопривода
   def set_servo_angle(angle):
       # Преобразуем угол (0-180) в значение длительности импульса (0-65535)
       # Для большинства сервоприводов:
       # 0 градусов = импульс около 0.5 мс (duty около 1638)
       # 90 градусов = импульс около 1.5 мс (duty около 4915)
       # 180 градусов = импульс около 2.5 мс (duty около 8192)
       min_duty = 1638  # Соответствует 0 градусов
       max_duty = 8192  # Соответствует 180 градусов
       
       # Преобразование угла в длительность импульса
       duty = min_duty + (max_duty - min_duty) * angle / 180
       
       # Установка длительности импульса
       servo.duty_u16(int(duty))
       
       # Мигаем светодиодом для индикации изменения
       led.toggle()
       
       print(f"Угол сервопривода установлен на {angle} градусов (duty = {int(duty)})")
   
   # Функция для демонстрации работы сервопривода
   def servo_demo():
       print("Демонстрация работы сервопривода")
       
       # Перемещение от 0 до 180 градусов
       print("Перемещение от 0 до 180 градусов...")
       for angle in range(0, 181, 10):
           set_servo_angle(angle)
           time.sleep(0.2)
       
       time.sleep(1)
       
       # Перемещение от 180 до 0 градусов
       print("Перемещение от 180 до 0 градусов...")
       for angle in range(180, -1, -10):
           set_servo_angle(angle)
           time.sleep(0.2)
       
       time.sleep(1)
       
       # Перемещение в центральное положение
       print("Перемещение в центральное положение (90 градусов)...")
       set_servo_angle(90)
   
   # Основной цикл программы
   def main():
       print("Управление сервоприводом с помощью Raspberry Pi Pico")
       print("Нажмите Ctrl+C для завершения.")
       print("--------------------------------------------------")
       
       try:
           while True:
               # Запускаем демонстрацию
               servo_demo()
               
               # Ждем некоторое время перед следующей демонстрацией
               time.sleep(2)
               
       except KeyboardInterrupt:
           # Устанавливаем сервопривод в нейтральное положение перед выходом
           set_servo_angle(90)
           # Останавливаем PWM
           servo.deinit()
           print("\nРабота с сервоприводом завершена.")
   
   # Запускаем программу
   if __name__ == "__main__":
       main()