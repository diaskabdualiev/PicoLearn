============================================================================
Работа с датчиком освещенности на Raspberry Pi Pico
============================================================================

Введение
============

В этом уроке мы познакомимся с принципами работы фоторезистора и научимся подключать его к Raspberry Pi Pico для считывания уровня освещенности. Полученные данные будем выводить в консоль. Это простой проект, который послужит отличной основой для более сложных систем мониторинга окружающей среды.

Необходимые компоненты
==============================================

* Raspberry Pi Pico
* Фоторезистор (LDR - Light Dependent Resistor)
* Макетная плата
* Соединительные провода
* Микро-USB кабель для питания и программирования

Структура проекта
================================

Наш проект будет состоять из одного файла:

* **main.py** - основной файл с кодом для чтения данных с датчика и вывода в консоль

Схема подключения
================================

Фоторезистор подключается к Raspberry Pi Pico следующим образом:

* Один вывод фоторезистора подключается к пину GP26 (аналоговый вход ADC0)
* Другой вывод фоторезистора подключается к пину 3.3V

.. note::
   Фоторезистор не имеет полярности, поэтому его можно подключать любой стороной.

Пошаговые инструкции
======================================

Шаг 1: Настройка оборудования
--------------------------------------------------------

1. Установите MicroPython на Raspberry Pi Pico, если это еще не сделано.
2. Соберите схему в соответствии с описанием выше.
3. Подключите Pico к компьютеру через USB-кабель.

Шаг 2: Создание основного файла main.py
--------------------------------------------------------

Создайте файл main.py со следующим содержимым:

.. code-block:: python

   from machine import Pin, ADC
   import time
   
   # Настройка аналогового входа для фоторезистора
   # GP26 соответствует ADC0
   ldr = ADC(26)
   
   # Настройка пина для встроенного светодиода
   led = Pin("LED", Pin.OUT)
   
   # Функция для чтения данных с фоторезистора
   def read_light_level():
       # Чтение аналогового значения (0-65535)
       raw_value = ldr.read_u16()
       
       # Преобразование в процентное соотношение (0-100%)
       light_percentage = 100 - ((raw_value / 65535) * 100)
       
       return raw_value, light_percentage

Разберем основные части кода:

1. Импортируем необходимые модули для работы с оборудованием и таймингом.
2. Настраиваем аналоговый вход ADC0 (GPIO26) для подключения фоторезистора.
3. Настраиваем встроенный светодиод для индикации работы.
4. Создаем функцию ``read_light_level()``, которая считывает данные с фоторезистора и преобразует их в процентное соотношение.

Теперь добавим основной цикл программы:

.. code-block:: python

   # Основной цикл программы
   def main():
       print("Начало мониторинга уровня освещенности...")
       print("Нажмите Ctrl+C для завершения.")
       print("----------------------------------------")
       print("| Сырое значение | Уровень освещенности |")
       print("----------------------------------------")
       
       try:
           while True:
               # Мигаем светодиодом для индикации чтения
               led.on()
               
               # Получаем данные с датчика
               raw, percentage = read_light_level()
               
               # Выводим данные в консоль
               print(f"| {raw:14} | {percentage:18.2f}% |")
               
               # Выключаем светодиод
               led.off()
               
               # Ждем перед следующим чтением
               time.sleep(1)
               
       except KeyboardInterrupt:
           print("\nМониторинг завершен.")
   
   # Запускаем программу
   if __name__ == "__main__":
       main()

Этот блок кода:

1. Создает основную функцию ``main()``, которая входит в бесконечный цикл чтения данных.
2. В начале выводит заголовок таблицы для удобства чтения данных.
3. В цикле:
   - Включает светодиод для индикации процесса чтения
   - Считывает данные с фоторезистора
   - Выводит данные в консоль в формате таблицы
   - Выключает светодиод
   - Ждет 1 секунду перед следующим измерением
4. Обрабатывает прерывание Ctrl+C для корректного завершения программы.

Инструкции по загрузке и запуску
===============================================

1. Подключите Raspberry Pi Pico к компьютеру через USB-кабель.
2. Скопируйте файл main.py на Pico (можно использовать Thonny IDE или любой другой метод).
3. После загрузки файла программа автоматически запустится.
4. Откройте последовательный порт (в Thonny это происходит автоматически) для просмотра вывода данных.
5. Для завершения программы нажмите Ctrl+C.

Возможные проблемы и их решения
==============================================

Неточные показания датчика
---------------------------------------------------

Если показания кажутся неточными или странными, проверьте следующее:

* Убедитесь, что фоторезистор надежно подключен к макетной плате.
* Проверьте подключение проводов к правильным пинам Pico.
* Попробуйте изменить положение фоторезистора для более корректных измерений.

Нет вывода в консоли
-----------------------------------------

Если вы не видите вывод в консоли, проверьте:

* Правильно ли выбран последовательный порт в вашей среде разработки.
* Установлена ли скорость порта 115200 бод.
* Корректно ли загружен файл main.py на Pico.

Заключение
=====================

В этом уроке мы научились:

* Подключать фоторезистор к Raspberry Pi Pico
* Считывать аналоговые значения с датчика
* Преобразовывать сырые данные в удобный для восприятия формат
* Выводить информацию в консоль в режиме реального времени

Проект можно расширить множеством способов: добавить сохранение данных, настроить пороговые значения для уведомлений или подключить дополнительные датчики для создания полноценной метеостанции.

Полный код программы
=======================================

.. code-block:: python

   from machine import Pin, ADC
   import time
   
   # Настройка аналогового входа для фоторезистора
   # GP26 соответствует ADC0
   ldr = ADC(26)
   
   # Настройка пина для встроенного светодиода
   led = Pin("LED", Pin.OUT)
   
   # Функция для чтения данных с фоторезистора
   def read_light_level():
       # Чтение аналогового значения (0-65535)
       raw_value = ldr.read_u16()
       
       # Преобразование в процентное соотношение (0-100%)
       light_percentage = 100 - ((raw_value / 65535) * 100)
       
       return raw_value, light_percentage
   
   # Основной цикл программы
   def main():
       print("Начало мониторинга уровня освещенности...")
       print("Нажмите Ctrl+C для завершения.")
       print("----------------------------------------")
       print("| Сырое значение | Уровень освещенности |")
       print("----------------------------------------")
       
       try:
           while True:
               # Мигаем светодиодом для индикации чтения
               led.on()
               
               # Получаем данные с датчика
               raw, percentage = read_light_level()
               
               # Выводим данные в консоль
               print(f"| {raw:14} | {percentage:18.2f}% |")
               
               # Выключаем светодиод
               led.off()
               
               # Ждем перед следующим чтением
               time.sleep(1)
               
       except KeyboardInterrupt:
           print("\nМониторинг завершен.")
   
   # Запускаем программу
   if __name__ == "__main__":
       main()