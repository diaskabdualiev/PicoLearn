Управление потенциометром на Raspberry Pi Pico
===============================================================================

Введение
-------------------------------------------------------------------------------

В этом уроке мы научимся подключать и использовать потенциометр с Raspberry Pi Pico. Потенциометр – это переменный резистор, который позволяет регулировать сопротивление вращением ручки. Мы будем считывать значения с потенциометра с помощью аналогово-цифрового преобразователя (АЦП) Raspberry Pi Pico и использовать их для управления яркостью светодиода.

Необходимые компоненты
-------------------------------------------------------------------------------

* Raspberry Pi Pico
* Потенциометр (10 кОм или другой)
* Светодиод
* Резистор 220 Ом (для светодиода)
* Провода для подключения
* USB-кабель для подключения Pico к компьютеру

Схема подключения
-------------------------------------------------------------------------------

Подключите компоненты к Raspberry Pi Pico следующим образом:

**Потенциометр:**

* Крайний вывод 1 → 3.3V (питание)
* Крайний вывод 2 → GND (земля)
* Средний вывод (выход) → GP26 (ADC0)

**Светодиод:**

* Анод (длинная ножка) → Резистор 220 Ом → GP15
* Катод (короткая ножка) → GND

.. note::
   Raspberry Pi Pico имеет 3 входа АЦП (ADC0-ADC2), которые доступны на контактах GP26-GP28. 
   В этом проекте мы используем GP26 (ADC0).

Программа для считывания значений потенциометра
-------------------------------------------------------------------------------

Рассмотрим код программы по частям:

Импорт необходимых библиотек и настройка пинов:

.. code-block:: python
   :caption: main.py (импорты и настройка)

   from machine import Pin, ADC, PWM
   import time

   # Настройка АЦП для потенциометра
   potentiometer = ADC(26)  # GP26 соответствует ADC0

   # Настройка ШИМ для светодиода
   led_pin = PWM(Pin(15))
   led_pin.freq(1000)  # Частота ШИМ 1000 Гц

В этой части кода:

* Импортируем необходимые классы: Pin для управления GPIO, ADC для аналогового ввода, PWM для управления яркостью светодиода
* Настраиваем ADC на пине 26 (GP26) для считывания значений с потенциометра
* Настраиваем PWM на пине 15 для управления яркостью светодиода с частотой 1000 Гц

Функция для отображения значений в консоли:

.. code-block:: python
   :caption: main.py (функция для вывода в консоль)

   def print_values(adc_value, percentage, duty):
       """
       Выводит значения в консоль с форматированием
       """
       print(f"ADC: {adc_value:4d} | Процент: {percentage:3d}% | ШИМ: {duty:5d}")

Эта функция:

* Принимает значение АЦП, процентное соотношение и значение ШИМ
* Форматирует и выводит эти значения в консоль для наглядности

Основной цикл программы:

.. code-block:: python
   :caption: main.py (основной цикл)

   # Константы для преобразования
   ADC_MAX = 65535  # Максимальное значение ADC (16-bit)
   PWM_MAX = 65535  # Максимальное значение PWM (16-bit)

   # Основной цикл
   print("Начинаем считывание потенциометра...")
   print("Поворачивайте ручку потенциометра для изменения яркости светодиода")
   print("------------------------------------------------------------")
   print("   ADC   | Процент | ШИМ    ")
   print("------------------------------------------------------------")

   try:
       while True:
           # Чтение значения с потенциометра
           adc_value = potentiometer.read_u16()
           
           # Преобразование в процент (0-100%)
           percentage = round(adc_value * 100 / ADC_MAX)
           
           # Преобразование в значение ШИМ для светодиода
           duty = round(adc_value * PWM_MAX / ADC_MAX)
           
           # Устанавливаем яркость светодиода
           led_pin.duty_u16(duty)
           
           # Выводим значения в консоль
           print_values(adc_value, percentage, duty)
           
           # Небольшая задержка для стабилизации вывода
           time.sleep(0.1)
           
   except KeyboardInterrupt:
       # Выключаем светодиод при остановке программы
       led_pin.duty_u16(0)
       print("\nПрограмма остановлена")

В основном цикле:

* Определяем максимальные значения для АЦП и ШИМ (65535 для 16-битного преобразования)
* Выводим заголовки таблицы для отображения значений в консоли
* В бесконечном цикле:

  * Считываем 16-битное значение с АЦП (0-65535)
  * Преобразуем его в процентное соотношение (0-100%)
  * Преобразуем его в значение для ШИМ, управляющего яркостью светодиода
  * Устанавливаем новое значение ШИМ для светодиода
  * Выводим все значения в консоль
  * Ждем 0.1 секунды для стабилизации вывода

* При нажатии Ctrl+C (KeyboardInterrupt) выключаем светодиод и завершаем программу

Функция для визуализации значения потенциометра с помощью светодиода:

.. code-block:: python
   :caption: main.py (функция для мигания светодиода)

   def blink_led_by_value(adc_value, max_delay=1.0, min_delay=0.1):
       """
       Мигает светодиодом с частотой, зависящей от значения потенциометра
       """
       # Преобразуем значение АЦП в интервал задержки
       delay = min_delay + (max_delay - min_delay) * (1 - adc_value / ADC_MAX)
       
       # Включаем светодиод
       led_pin.duty_u16(PWM_MAX)
       time.sleep(delay)
       
       # Выключаем светодиод
       led_pin.duty_u16(0)
       time.sleep(delay)

Эта функция:

* Принимает значение АЦП и пределы задержки
* Преобразует значение АЦП в интервал задержки между миганиями
* Включает и выключает светодиод с рассчитанной задержкой
* Чем больше значение потенциометра, тем быстрее мигает светодиод

Дополнительная демонстрация:

.. code-block:: python
   :caption: main.py (дополнительная демонстрация)

   def demo_blink_mode():
       """
       Демонстрирует режим мигания светодиода с частотой,
       зависящей от значения потенциометра
       """
       print("\nРежим мигания светодиода")
       print("Вращайте потенциометр для изменения частоты мигания")
       print("Нажмите Ctrl+C для выхода")
       
       try:
           while True:
               # Чтение значения с потенциометра
               adc_value = potentiometer.read_u16()
               
               # Преобразование в процент (0-100%)
               percentage = round(adc_value * 100 / ADC_MAX)
               
               # Выводим значение в консоль
               print(f"Значение: {percentage}%", end="\r")
               
               # Мигаем светодиодом с частотой, зависящей от значения потенциометра
               blink_led_by_value(adc_value)
               
       except KeyboardInterrupt:
           # Выключаем светодиод при остановке программы
           led_pin.duty_u16(0)
           print("\nДемонстрация завершена")

Эта функция:

* Выводит инструкции для пользователя
* В бесконечном цикле:

  * Считывает значение с потенциометра
  * Преобразует его в процентное соотношение
  * Выводит значение в консоль (в той же строке с помощью `\r`)
  * Вызывает функцию blink_led_by_value для мигания светодиода

* При нажатии Ctrl+C выключает светодиод и завершает демонстрацию

Полный код программы
-------------------------------------------------------------------------------

Вот полный код программы для работы с потенциометром:

.. code-block:: python
   :caption: main.py (полный код)

   from machine import Pin, ADC, PWM
   import time

   # Настройка АЦП для потенциометра
   potentiometer = ADC(26)  # GP26 соответствует ADC0

   # Настройка ШИМ для светодиода
   led_pin = PWM(Pin(15))
   led_pin.freq(1000)  # Частота ШИМ 1000 Гц

   # Константы для преобразования
   ADC_MAX = 65535  # Максимальное значение ADC (16-bit)
   PWM_MAX = 65535  # Максимальное значение PWM (16-bit)

   def print_values(adc_value, percentage, duty):
       """
       Выводит значения в консоль с форматированием
       """
       print(f"ADC: {adc_value:4d} | Процент: {percentage:3d}% | ШИМ: {duty:5d}")

   def blink_led_by_value(adc_value, max_delay=1.0, min_delay=0.1):
       """
       Мигает светодиодом с частотой, зависящей от значения потенциометра
       """
       # Преобразуем значение АЦП в интервал задержки
       delay = min_delay + (max_delay - min_delay) * (1 - adc_value / ADC_MAX)
       
       # Включаем светодиод
       led_pin.duty_u16(PWM_MAX)
       time.sleep(delay)
       
       # Выключаем светодиод
       led_pin.duty_u16(0)
       time.sleep(delay)

   def demo_brightness_mode():
       """
       Демонстрирует режим управления яркостью светодиода
       """
       print("Начинаем считывание потенциометра...")
       print("Поворачивайте ручку потенциометра для изменения яркости светодиода")
       print("------------------------------------------------------------")
       print("   ADC   | Процент | ШИМ    ")
       print("------------------------------------------------------------")
       
       try:
           while True:
               # Чтение значения с потенциометра
               adc_value = potentiometer.read_u16()
               
               # Преобразование в процент (0-100%)
               percentage = round(adc_value * 100 / ADC_MAX)
               
               # Преобразование в значение ШИМ для светодиода
               duty = round(adc_value * PWM_MAX / ADC_MAX)
               
               # Устанавливаем яркость светодиода
               led_pin.duty_u16(duty)
               
               # Выводим значения в консоль
               print_values(adc_value, percentage, duty)
               
               # Небольшая задержка для стабилизации вывода
               time.sleep(0.1)
               
       except KeyboardInterrupt:
           # Выключаем светодиод при остановке программы
           led_pin.duty_u16(0)
           print("\nПрограмма остановлена")

   def demo_blink_mode():
       """
       Демонстрирует режим мигания светодиода с частотой,
       зависящей от значения потенциометра
       """
       print("\nРежим мигания светодиода")
       print("Вращайте потенциометр для изменения частоты мигания")
       print("Нажмите Ctrl+C для выхода")
       
       try:
           while True:
               # Чтение значения с потенциометра
               adc_value = potentiometer.read_u16()
               
               # Преобразование в процент (0-100%)
               percentage = round(adc_value * 100 / ADC_MAX)
               
               # Выводим значение в консоль
               print(f"Значение: {percentage}%", end="\r")
               
               # Мигаем светодиодом с частотой, зависящей от значения потенциометра
               blink_led_by_value(adc_value)
               
       except KeyboardInterrupt:
           # Выключаем светодиод при остановке программы
           led_pin.duty_u16(0)
           print("\nДемонстрация завершена")

   # Основная программа
   if __name__ == "__main__":
       try:
           # Демонстрация режима управления яркостью
           demo_brightness_mode()
           
           # После прерывания первого режима, запускаем режим мигания
           demo_blink_mode()
           
       except Exception as e:
           # Обработка всех исключений
           led_pin.duty_u16(0)
           print(f"\nОшибка: {e}")
       
       finally:
           # Выключаем светодиод и печатаем сообщение при любом выходе из программы
           led_pin.duty_u16(0)
           print("\nПрограмма завершена")

Загрузка и запуск программы
-------------------------------------------------------------------------------

Для запуска программы:

1. Подключите потенциометр и светодиод к Raspberry Pi Pico согласно схеме
2. Подключите Raspberry Pi Pico к компьютеру через USB-кабель
3. Скопируйте файл main.py на Pico
4. Перезагрузите Pico (отключите и подключите заново или нажмите кнопку RESET)

После запуска программы:

1. В первом режиме вращение потенциометра будет изменять яркость светодиода
2. Значения АЦП, процентное соотношение и значение ШИМ будут отображаться в консоли
3. Нажмите Ctrl+C для перехода ко второму режиму
4. Во втором режиме вращение потенциометра будет изменять частоту мигания светодиода
5. Нажмите Ctrl+C для завершения программы

Возможные проблемы и их решения
-------------------------------------------------------------------------------

1. **Потенциометр не влияет на светодиод**
   
   * Проверьте правильность подключения потенциометра (не перепутаны ли выводы)
   * Убедитесь, что потенциометр подключен к правильному пину (GP26)
   * Проверьте, что светодиод подключен через резистор к правильному пину (GP15)

2. **Значения АЦП не изменяются при вращении потенциометра**
   
   * Проверьте подключение потенциометра к питанию и земле
   * Убедитесь, что средний вывод потенциометра подключен к ADC0 (GP26)
   * Попробуйте заменить потенциометр, если он неисправен

3. **Светодиод не светится или светится очень тускло**
   
   * Проверьте полярность подключения светодиода (анод - длинная ножка)
   * Убедитесь, что используете резистор подходящего номинала (220-330 Ом)
   * Проверьте подключение светодиода к правильному пину (GP15)

Заключение
-------------------------------------------------------------------------------

В этом уроке мы научились:

* Подключать потенциометр к Raspberry Pi Pico
* Считывать аналоговые значения с помощью АЦП
* Преобразовывать аналоговые значения в различные форматы
* Управлять яркостью светодиода с помощью ШИМ
* Создавать разные режимы работы в зависимости от значения потенциометра

Потенциометр — это универсальный компонент, который можно использовать в различных проектах, где требуется регулировка параметров вручную. Вы можете адаптировать код из этого урока для управления скоростью моторов, громкостью звука, интенсивностью света и многими другими параметрами.

.. warning::
   Некоторые потенциометры могут иметь разные диапазоны сопротивления. Если вы используете потенциометр с сопротивлением отличным от 10 кОм, это не повлияет на функциональность, но может повлиять на энергопотребление.