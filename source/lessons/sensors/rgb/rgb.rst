Управление RGB-светодиодом с общим катодом на Raspberry Pi Pico
===============================================================================

Введение
-------------------------------------------------------------------------------

В этом уроке мы научимся управлять RGB-светодиодом с общим катодом с помощью Raspberry Pi Pico. RGB-светодиод позволяет создавать различные цвета путем смешивания красного, зеленого и синего цветов с разной интенсивностью. Мы напишем простую программу на MicroPython, которая будет последовательно менять цвета светодиода, а также создавать плавные переходы между ними.

Необходимые компоненты
-------------------------------------------------------------------------------

* Raspberry Pi Pico
* RGB-светодиод с общим катодом
* Провода для подключения
* USB-кабель для подключения Pico к компьютеру

Схема подключения
-------------------------------------------------------------------------------

RGB-светодиод с общим катодом имеет 4 вывода:

* Самый длинный вывод - общий катод (подключается к GND)
* Остальные три вывода соответствуют красному (R), зеленому (G) и синему (B) цветам

Подключите выводы RGB-светодиода к Raspberry Pi Pico следующим образом:

* Общий катод → GND
* Красный (R) → GP0
* Зеленый (G) → GP1
* Синий (B) → GP2

.. note::
   В данном проекте мы считаем, что резисторы уже встроены в цепь, поэтому отдельно их подключать не нужно.

Программа для управления RGB-светодиодом
-------------------------------------------------------------------------------

Для управления RGB-светодиодом мы будем использовать ШИМ (PWM - Pulse Width Modulation) для изменения яркости каждого цвета. Рассмотрим код по частям.

Импорт необходимых модулей и настройка выводов:

.. code-block:: python
   :caption: main.py (импорты и настройка)

   from machine import Pin, PWM
   import time

   # Настройка выводов для RGB-светодиода
   red_pin = PWM(Pin(0))
   green_pin = PWM(Pin(1))
   blue_pin = PWM(Pin(2))

   # Установка частоты ШИМ для всех каналов
   red_pin.freq(1000)
   green_pin.freq(1000)
   blue_pin.freq(1000)

   # Максимальное значение ШИМ
   MAX_DUTY = 65535  # Максимальное значение для 16-битного ШИМ

В этой части кода:

* Импортируем необходимые модули: Pin и PWM из machine для работы с GPIO и ШИМ, time для создания задержек
* Настраиваем три пина (0, 1, 2) как выходы ШИМ для управления RGB-светодиодом
* Устанавливаем частоту ШИМ 1000 Гц для всех каналов
* Определяем константу MAX_DUTY для максимального значения ШИМ (65535 для 16-битного ШИМ в MicroPython)

Функция для установки цвета:

.. code-block:: python
   :caption: main.py (функция установки цвета)

   def set_color(r, g, b):
       """
       Устанавливает цвет RGB-светодиода
       Значения r, g, b должны быть в диапазоне 0-255
       """
       # Инвертируем значения, так как у нас общий катод
       # 0 - полная яркость, MAX_DUTY - выключено
       r_duty = MAX_DUTY - int(r * MAX_DUTY / 255)
       g_duty = MAX_DUTY - int(g * MAX_DUTY / 255)
       b_duty = MAX_DUTY - int(b * MAX_DUTY / 255)
       
       red_pin.duty_u16(r_duty)
       green_pin.duty_u16(g_duty)
       blue_pin.duty_u16(b_duty)

Функция set_color:

* Принимает три параметра (r, g, b) в диапазоне 0-255, соответствующие яркости каждого из цветов
* Преобразует значения из диапазона 0-255 в диапазон 0-65535 для 16-битного ШИМ
* Инвертирует значения, так как светодиод с общим катодом имеет инвертированную логику (0 - полная яркость, MAX_DUTY - выключено)
* Устанавливает соответствующий коэффициент заполнения (duty cycle) для каждого ШИМ-канала

Функция демонстрации основных цветов:

.. code-block:: python
   :caption: main.py (демонстрация основных цветов)

   def show_basic_colors():
       """Демонстрирует основные и составные цвета"""
       # Красный
       set_color(255, 0, 0)
       time.sleep(1)
       
       # Зеленый
       set_color(0, 255, 0)
       time.sleep(1)
       
       # Синий
       set_color(0, 0, 255)
       time.sleep(1)
       
       # Желтый (красный + зеленый)
       set_color(255, 255, 0)
       time.sleep(1)
       
       # Пурпурный (красный + синий)
       set_color(255, 0, 255)
       time.sleep(1)
       
       # Голубой (зеленый + синий)
       set_color(0, 255, 255)
       time.sleep(1)
       
       # Белый (все цвета)
       set_color(255, 255, 255)
       time.sleep(1)
       
       # Выключить
       set_color(0, 0, 0)
       time.sleep(1)

Функция show_basic_colors:

* Последовательно устанавливает основные цвета (красный, зеленый, синий)
* Затем устанавливает составные цвета, получаемые смешением основных:
  
  * Желтый = красный + зеленый
  * Пурпурный = красный + синий
  * Голубой = зеленый + синий
  * Белый = все цвета

* Между сменой цветов делает паузу в 1 секунду с помощью time.sleep(1)
* В конце выключает светодиод (устанавливает все цвета в 0)

Функция для создания эффекта радуги:

.. code-block:: python
   :caption: main.py (эффект радуги)

   def rainbow_cycle(cycles=3, step=5):
       """
       Создает эффект радуги путем плавного изменения цветов
       cycles - количество циклов
       step - шаг изменения (1-255, меньшие значения делают переход более плавным)
       """
       for _ in range(cycles):
           # Красный к желтому (добавляем зеленый)
           for g in range(0, 256, step):
               set_color(255, g, 0)
               time.sleep(0.02)
               
           # Желтый к зеленому (убираем красный)
           for r in range(255, -1, -step):
               set_color(r, 255, 0)
               time.sleep(0.02)
               
           # Зеленый к голубому (добавляем синий)
           for b in range(0, 256, step):
               set_color(0, 255, b)
               time.sleep(0.02)
               
           # Голубой к синему (убираем зеленый)
           for g in range(255, -1, -step):
               set_color(0, g, 255)
               time.sleep(0.02)
               
           # Синий к пурпурному (добавляем красный)
           for r in range(0, 256, step):
               set_color(r, 0, 255)
               time.sleep(0.02)
               
           # Пурпурный к красному (убираем синий)
           for b in range(255, -1, -step):
               set_color(255, 0, b)
               time.sleep(0.02)

Функция rainbow_cycle:

* Принимает два параметра:
  
  * cycles - количество полных циклов смены цветов
  * step - шаг изменения яркости (от 1 до 255)

* Создает эффект плавного перехода между цветами радуги:
  
  * Начинаем с красного и переходим к желтому, постепенно увеличивая яркость зеленого канала
  * Переходим от желтого к зеленому, постепенно уменьшая яркость красного канала
  * И так далее по всему циклу цветов радуги

* Между сменой яркости делает небольшую паузу (0.02 секунды), чтобы переход был заметен для глаза

Основной цикл программы:

.. code-block:: python
   :caption: main.py (основной цикл)

   # Основной цикл программы
   try:
       while True:
           print("Демонстрация основных цветов...")
           show_basic_colors()
           
           print("Эффект радуги...")
           rainbow_cycle()
           
   except KeyboardInterrupt:
       # Выключаем светодиод при остановке программы
       set_color(0, 0, 0)
       print("Программа остановлена")

Основной цикл программы:

* Находится в бесконечном цикле while True
* Сначала демонстрирует основные цвета с помощью функции show_basic_colors()
* Затем создает эффект радуги с помощью функции rainbow_cycle()
* Обработчик исключения KeyboardInterrupt позволяет корректно завершить программу при нажатии Ctrl+C:
  
  * Выключает светодиод (устанавливает все цвета в 0)
  * Выводит сообщение о завершении программы

Загрузка и запуск программы
-------------------------------------------------------------------------------

Для загрузки и запуска программы на Raspberry Pi Pico:

1. Подключите Raspberry Pi Pico к компьютеру через USB-кабель
2. Скопируйте код в файл main.py на Pico
3. Нажмите кнопку сброса или отключите и подключите Pico заново

После этого программа автоматически запустится, и вы увидите, как RGB-светодиод последовательно меняет цвета.

Возможные проблемы и их решения
-------------------------------------------------------------------------------

1. **Светодиод не светится или светится неправильными цветами**
   
   * Проверьте правильность подключения выводов светодиода
   * Убедитесь, что общий катод подключен к GND
   * Если цвета перепутаны, проверьте соответствие выводов светодиода подключенным пинам

2. **Светодиод светится слишком тускло**
   
   * Проверьте качество соединений
   * Попробуйте изменить максимальные значения в функции set_color (например, вместо 255 использовать 100)

3. **Программа не запускается автоматически**
   
   * Убедитесь, что файл сохранен с именем main.py
   * Перезагрузите Pico, нажав кнопку RESET или отключив и подключив USB-кабель

Заключение
-------------------------------------------------------------------------------

В этом уроке мы научились управлять RGB-светодиодом с общим катодом с использованием Raspberry Pi Pico и MicroPython. Мы изучили, как использовать ШИМ для управления яркостью каждого канала, как создавать различные цвета и эффекты плавного перехода между ними.

Вы можете экспериментировать с кодом, изменяя значения в функциях set_color и rainbow_cycle для создания собственных световых эффектов. Попробуйте добавить новые функции для создания эффекта мигания, пульсации или случайной смены цветов.

.. warning::
   Не забывайте про ограничения по току Raspberry Pi Pico при подключении дополнительных светодиодов или других компонентов к проекту.

Полный код программы
-------------------------------------------------------------------------------

Вот полный код программы для управления RGB-светодиодом:

.. code-block:: python
   :caption: main.py (полный код)

   from machine import Pin, PWM
   import time

   # Настройка выводов для RGB-светодиода
   red_pin = PWM(Pin(0))
   green_pin = PWM(Pin(1))
   blue_pin = PWM(Pin(2))

   # Установка частоты ШИМ для всех каналов
   red_pin.freq(1000)
   green_pin.freq(1000)
   blue_pin.freq(1000)

   # Максимальное значение ШИМ
   MAX_DUTY = 65535  # Максимальное значение для 16-битного ШИМ

   def set_color(r, g, b):
       """
       Устанавливает цвет RGB-светодиода
       Значения r, g, b должны быть в диапазоне 0-255
       """
       # Инвертируем значения, так как у нас общий катод
       # 0 - полная яркость, MAX_DUTY - выключено
       r_duty = MAX_DUTY - int(r * MAX_DUTY / 255)
       g_duty = MAX_DUTY - int(g * MAX_DUTY / 255)
       b_duty = MAX_DUTY - int(b * MAX_DUTY / 255)
       
       red_pin.duty_u16(r_duty)
       green_pin.duty_u16(g_duty)
       blue_pin.duty_u16(b_duty)

   def show_basic_colors():
       """Демонстрирует основные и составные цвета"""
       # Красный
       set_color(255, 0, 0)
       time.sleep(1)
       
       # Зеленый
       set_color(0, 255, 0)
       time.sleep(1)
       
       # Синий
       set_color(0, 0, 255)
       time.sleep(1)
       
       # Желтый (красный + зеленый)
       set_color(255, 255, 0)
       time.sleep(1)
       
       # Пурпурный (красный + синий)
       set_color(255, 0, 255)
       time.sleep(1)
       
       # Голубой (зеленый + синий)
       set_color(0, 255, 255)
       time.sleep(1)
       
       # Белый (все цвета)
       set_color(255, 255, 255)
       time.sleep(1)
       
       # Выключить
       set_color(0, 0, 0)
       time.sleep(1)

   def rainbow_cycle(cycles=3, step=5):
       """
       Создает эффект радуги путем плавного изменения цветов
       cycles - количество циклов
       step - шаг изменения (1-255, меньшие значения делают переход более плавным)
       """
       for _ in range(cycles):
           # Красный к желтому (добавляем зеленый)
           for g in range(0, 256, step):
               set_color(255, g, 0)
               time.sleep(0.02)
               
           # Желтый к зеленому (убираем красный)
           for r in range(255, -1, -step):
               set_color(r, 255, 0)
               time.sleep(0.02)
               
           # Зеленый к голубому (добавляем синий)
           for b in range(0, 256, step):
               set_color(0, 255, b)
               time.sleep(0.02)
               
           # Голубой к синему (убираем зеленый)
           for g in range(255, -1, -step):
               set_color(0, g, 255)
               time.sleep(0.02)
               
           # Синий к пурпурному (добавляем красный)
           for r in range(0, 256, step):
               set_color(r, 0, 255)
               time.sleep(0.02)
               
           # Пурпурный к красному (убираем синий)
           for b in range(255, -1, -step):
               set_color(255, 0, b)
               time.sleep(0.02)

   # Основной цикл программы
   try:
       while True:
           print("Демонстрация основных цветов...")
           show_basic_colors()
           
           print("Эффект радуги...")
           rainbow_cycle()
           
   except KeyboardInterrupt:
       # Выключаем светодиод при остановке программы
       set_color(0, 0, 0)
       print("Программа остановлена")