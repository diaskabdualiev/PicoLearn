============================================================================
Обнаружение движения с помощью PIR датчика и Raspberry Pi Pico
============================================================================

Введение
============

В этом уроке мы научимся использовать PIR (Passive Infrared) датчик движения вместе с Raspberry Pi Pico. PIR датчики обнаруживают движение путем измерения изменений в инфракрасном излучении окружающих объектов. Это позволяет создавать системы, реагирующие на присутствие человека или животного. Мы создадим простую программу, которая будет регистрировать движение и выводить информацию в консоль, а также управлять встроенным светодиодом для визуальной индикации.

Необходимые компоненты
==============================================

* Raspberry Pi Pico
* PIR датчик движения (HC-SR501 или аналогичный)
* Макетная плата
* Соединительные провода
* Микро-USB кабель для питания и программирования

Структура проекта
================================

Наш проект будет состоять из одного файла:

* **main.py** - основной файл с кодом для чтения данных с PIR датчика и вывода информации в консоль

Схема подключения
================================

PIR датчик подключается к Raspberry Pi Pico следующим образом:

* VCC пин PIR датчика подключается к пину VBUS (5V) или 3.3V на Pico (в зависимости от модели датчика)
* GND пин PIR датчика подключается к пину GND на Pico
* OUT (или Signal) пин PIR датчика подключается к пину GP15 на Pico

.. note::
   Большинство PIR датчиков HC-SR501 имеют два потенциометра для настройки чувствительности и времени задержки. Перед началом работы рекомендуется установить чувствительность на среднее значение, а время задержки на минимум.

Пошаговые инструкции
======================================

Шаг 1: Настройка оборудования
--------------------------------------------------------

1. Установите MicroPython на Raspberry Pi Pico, если это еще не сделано.
2. Соберите схему в соответствии с описанием выше.
3. Настройте потенциометры на PIR датчике (если есть):
   * Потенциометр чувствительности (обычно обозначен "Sensitivity")
   * Потенциометр времени задержки (обычно обозначен "Time Delay")
4. Подключите Pico к компьютеру через USB-кабель.

Шаг 2: Создание основного файла main.py
--------------------------------------------------------

Создайте файл main.py со следующим содержимым:

.. code-block:: python

   from machine import Pin
   import time
   
   # Настройка пина для PIR датчика
   pir_sensor = Pin(15, Pin.IN)
   
   # Настройка пина для встроенного светодиода
   led = Pin("LED", Pin.OUT)
   
   # Переменная для хранения предыдущего состояния датчика
   previous_state = 0
   
   # Функция для обработки состояния датчика движения
   def handle_motion_detection(current_state):
       global previous_state
       
       # Если состояние изменилось с 0 на 1 - движение обнаружено
       if current_state == 1 and previous_state == 0:
           print("Движение обнаружено!")
           led.on()
       
       # Если состояние изменилось с 1 на 0 - движение прекратилось
       elif current_state == 0 and previous_state == 1:
           print("Движение прекратилось")
           led.off()
       
       # Обновляем предыдущее состояние
       previous_state = current_state

Разберем основные части кода:

1. Импортируем необходимые модули для работы с GPIO и таймингом.
2. Настраиваем пин GP15 как вход для PIR датчика.
3. Настраиваем встроенный светодиод как выход для индикации.
4. Создаем глобальную переменную ``previous_state`` для отслеживания изменений состояния датчика.
5. Определяем функцию ``handle_motion_detection()``, которая:
   * Обнаруживает изменение состояния датчика с 0 на 1 (движение обнаружено)
   * Обнаруживает изменение состояния датчика с 1 на 0 (движение прекратилось)
   * Включает или выключает светодиод соответственно
   * Выводит информацию в консоль
   * Обновляет предыдущее состояние датчика

Теперь добавим основной цикл программы:

.. code-block:: python

   # Основной цикл программы
   def main():
       print("Мониторинг движения с помощью PIR датчика...")
       print("Нажмите Ctrl+C для завершения.")
       print("----------------------------------------")
       
       # Даем PIR датчику время на инициализацию
       print("Инициализация PIR датчика...")
       time.sleep(2)
       print("PIR датчик готов!")
       
       try:
           while True:
               # Считываем текущее состояние датчика
               current_state = pir_sensor.value()
               
               # Обрабатываем состояние датчика
               handle_motion_detection(current_state)
               
               # Небольшая задержка для уменьшения нагрузки на процессор
               time.sleep(0.1)
               
       except KeyboardInterrupt:
           # Выключаем светодиод при завершении
           led.off()
           print("\nМониторинг движения завершен.")
   
   # Запускаем программу
   if __name__ == "__main__":
       main()

Этот блок кода:

1. Создает основную функцию ``main()``, которая инициализирует PIR датчик и входит в бесконечный цикл.
2. Даёт PIR датчику 2 секунды на инициализацию (это нормальное время разогрева для PIR датчиков).
3. В цикле:
   * Считывает текущее состояние датчика
   * Вызывает функцию обработки состояния
   * Добавляет небольшую задержку для стабильности работы
4. Обрабатывает прерывание Ctrl+C для корректного завершения программы.

Инструкции по загрузке и запуску
===============================================

1. Подключите Raspberry Pi Pico к компьютеру через USB-кабель.
2. Скопируйте файл main.py на Pico (можно использовать Thonny IDE или любой другой метод).
3. После загрузки файла программа автоматически запустится.
4. Откройте последовательный порт (в Thonny это происходит автоматически) для просмотра вывода данных.
5. Отойдите от датчика и дайте ему время на инициализацию (обычно это занимает около 1 минуты для полной стабилизации).
6. Проверьте работу датчика, двигаясь в зоне его обнаружения.
7. Для завершения программы нажмите Ctrl+C.

Возможные проблемы и их решения
==============================================

Ложные срабатывания
---------------------------------------------------

Если датчик слишком часто срабатывает без видимого движения:

* Уменьшите чувствительность с помощью соответствующего потенциометра.
* Убедитесь, что датчик не направлен на источники тепла (радиаторы, компьютеры).
* Проверьте, не находится ли датчик на сквозняке или под прямыми солнечными лучами.

Датчик не реагирует на движение
-----------------------------------------

Если датчик не реагирует на движение, проверьте следующее:

* Увеличьте чувствительность с помощью соответствующего потенциометра.
* Проверьте правильность подключения проводов.
* Убедитесь, что датчик получает достаточное питание (5V или 3.3V в зависимости от модели).
* Помните, что PIR датчик лучше реагирует на движение поперек зоны обнаружения, чем на движение к датчику или от него.

Датчик постоянно в активном состоянии
-----------------------------------------

Если датчик постоянно находится в активном состоянии (даже без движения):

* Уменьшите время задержки с помощью соответствующего потенциометра.
* Дайте датчику больше времени на инициализацию (до 1 минуты).
* Проверьте наличие перемычек на датчике и их положение (некоторые модели имеют перемычки для выбора режима работы).

Заключение
=====================

В этом уроке мы научились:

* Подключать PIR датчик движения к Raspberry Pi Pico
* Считывать и интерпретировать сигналы с датчика
* Обнаруживать изменения состояния датчика
* Создавать простую систему обнаружения движения с визуальной индикацией

Этот проект можно расширить различными способами:

* Добавить звуковую сигнализацию при обнаружении движения
* Подключить дополнительные индикаторы или дисплей
* Интегрировать с другими датчиками для создания комплексной системы безопасности
* Добавить регистрацию времени обнаружения движения
* Настроить отправку уведомлений при обнаружении движения

Полный код программы
=======================================

.. code-block:: python

   from machine import Pin
   import time
   
   # Настройка пина для PIR датчика
   pir_sensor = Pin(15, Pin.IN)
   
   # Настройка пина для встроенного светодиода
   led = Pin("LED", Pin.OUT)
   
   # Переменная для хранения предыдущего состояния датчика
   previous_state = 0
   
   # Функция для обработки состояния датчика движения
   def handle_motion_detection(current_state):
       global previous_state
       
       # Если состояние изменилось с 0 на 1 - движение обнаружено
       if current_state == 1 and previous_state == 0:
           print("Движение обнаружено!")
           led.on()
       
       # Если состояние изменилось с 1 на 0 - движение прекратилось
       elif current_state == 0 and previous_state == 1:
           print("Движение прекратилось")
           led.off()
       
       # Обновляем предыдущее состояние
       previous_state = current_state
   
   # Основной цикл программы
   def main():
       print("Мониторинг движения с помощью PIR датчика...")
       print("Нажмите Ctrl+C для завершения.")
       print("----------------------------------------")
       
       # Даем PIR датчику время на инициализацию
       print("Инициализация PIR датчика...")
       time.sleep(2)
       print("PIR датчик готов!")
       
       try:
           while True:
               # Считываем текущее состояние датчика
               current_state = pir_sensor.value()
               
               # Обрабатываем состояние датчика
               handle_motion_detection(current_state)
               
               # Небольшая задержка для уменьшения нагрузки на процессор
               time.sleep(0.1)
               
       except KeyboardInterrupt:
           # Выключаем светодиод при завершении
           led.off()
           print("\nМониторинг движения завершен.")
   
   # Запускаем программу
   if __name__ == "__main__":
       main()