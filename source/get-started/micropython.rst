Введение в MicroPython
======================================

MicroPython - это программная реализация языка программирования, в значительной степени совместимая с Python 3, написанная на C и оптимизированная для работы на микроконтроллерах.

MicroPython включает в себя компилятор Python в байт-код и интерпретатор для выполнения этого байт-кода. Пользователь получает интерактивную консоль (REPL) для немедленного выполнения поддерживаемых команд. В состав входят основные библиотеки Python; также MicroPython включает модули, предоставляющие программисту доступ к низкоуровневому оборудованию.

* Ссылка: `MicroPython - Wikipedia <https://en.wikipedia.org/wiki/MicroPython>`_

История начинается здесь
--------------------------------

Ситуация изменилась в 2013 году, когда Дамиан Джордж запустил краудфандинговую кампанию (Kickstarter).

Дамиан был студентом Кембриджского университета и увлеченным программистом-робототехником. Он хотел уменьшить мир Python с гигабайтного компьютера до килобайта. Его кампания на Kickstarter была направлена на поддержку его работы, пока он превращал свою концепцию в полноценную реализацию.

Сообщество Python-энтузиастов активно поддержало MicroPython, стремясь к успеху проекта.

Помимо тестирования и поддержки кода, разработчики предоставили учебные пособия, библиотеки кода и помощь в портировании на новое оборудование, что позволило Дамиану сосредоточиться на других аспектах проекта.

* Ссылка: `realpython <https://realpython.com/micropython/>`_

Почему MicroPython?
------------------------------------

Хотя изначально MicroPython был выпущен в рамках кампании на Kickstarter в виде платы разработки "pyboard" на базе STM32F4, он поддерживает множество архитектур на базе ARM. Основные поддерживаемые порты: ARM Cortex-M (различные платы STM32, TI CC3200/WiPy, Teensy, Nordic nRF, SAMD21, SAMD51), ESP8266, ESP32, 16-битный PIC, Unix, Windows, Zephyr и JavaScript.

Во-вторых, MicroPython обеспечивает быструю обратную связь. Это возможно благодаря REPL, который позволяет вводить команды в интерактивном режиме и сразу получать ответы. Вы можете изменять код и запускать его мгновенно, вместо прохождения полного цикла кодирования-компиляции-загрузки-исполнения.

Хотя Python обладает теми же преимуществами, некоторые микроконтроллерные платы, такие как Raspberry Pi Pico, слишком малы, просты и имеют недостаточно памяти для запуска стандартного Python. Именно поэтому MicroPython был разработан таким образом, чтобы сохранить основные возможности Python и добавить новые функции для работы с микроконтроллерами.

Далее вы узнаете, как установить MicroPython на Raspberry Pi Pico.

* Ссылка: `MicroPython - Wikipedia <https://en.wikipedia.org/wiki/MicroPython>`_
* Ссылка: `realpython <https://realpython.com/micropython/>`_